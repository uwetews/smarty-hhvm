<?php
class TP_yyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    public function __construct($s, $m = array())
    {
        if ($s instanceof TP_yyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof TP_yyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    public function __toString()
    {
        return $this->string;
    }

    public function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    public function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    public function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof TP_yyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);

                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof TP_yyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    public function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

class TP_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};


#line 13 "../smarty/lexer/smarty_internal_templateparser.y"

/**
* Smarty Internal Plugin Templateparser
*
* This is the template parser.
* It is generated from the smarty_internal_templateparser.y file
* @package Smarty
* @subpackage Compiler
* @author Uwe Tews
*/
class Smarty_Internal_Templateparser
{
#line 26 "../smarty/lexer/smarty_internal_templateparser.y"

    const Err1 = "Security error: Call to private object member not allowed";
    const Err2 = "Security error: Call to dynamic object member not allowed";

    /**
     * result status
     *
     * @var bool
     */
    public $successful = true;
    /**
     * return value
     *
     * @var mixed
     */
    public $retvalue = 0;
    /**
     * counter for prefix code
     *
     * @var int
     */
    public static $prefix_number = 0;
    /**
     * @var
     */
    public $yymajor;
    /**
     * last index of array variable
     *
     * @var mixed
     */
    public $last_index;
    /**
     * last variable name
     *
     * @var string
     */
    public $last_variable;
    /**
     * root parse tree buffer
     *
     * @var Smarty_Internal_ParseTree
     */
    public $root_buffer;
    /**
     * current parse tree object
     *
     * @var Smarty_Internal_ParseTree
     */
    public $current_buffer;
    /**
     * lexer object
     *
     * @var Smarty_Internal_Templatelexer
     */
    private $lex;
    /**
     * internal error flag
     *
     * @var bool
     */
    private $internalError = false;
    /**
     * {strip} status
     *
     * @var bool
     */
    public $strip = false;
    /**
     * compiler object
     *
     * @var Smarty_Internal_TemplateCompilerBase
     */
    public $compiler = null;
    /**
     * smarty object
     *
     * @var Smarty
     */
    public $smarty = null;
    /**
     * template object
     *
     * @var Smarty_Internal_Template
     */
    public $template = null;
    /**
     * block nesting level
     *
     * @var int
     */
    public $block_nesting_level = 0;

    /**
     * security object
     *
     * @var Smarty_Security
     */
    private $security = null;

    /**
     * constructor
     *
     * @param Smarty_Internal_Templatelexer        $lex
     * @param Smarty_Internal_TemplateCompilerBase $compiler
     */
    function __construct(Smarty_Internal_Templatelexer $lex, Smarty_Internal_TemplateCompilerBase $compiler)
    {
        $this->lex = $lex;
        $this->compiler = $compiler;
        $this->template = $this->compiler->template;
        $this->smarty = $this->template->smarty;
        $this->compiler->has_variable_string = false;
        $this->compiler->prefix_code = array();
        $this->security = isset($this->smarty->security_policy);
        $this->current_buffer = $this->root_buffer = new Smarty_Internal_ParseTree_Template($this);
    }

    /**
     * insert PHP code in current buffer
     *
     * @param string $code
     */
    public function insertPhpCode($code)
    {
        $this->current_buffer->append_subtree(new Smarty_Internal_ParseTree_Tag($this, $code));
    }


    const TP_VERT                           =  1;
    const TP_COLON                          =  2;
    const TP_RDEL                           =  3;
    const TP_COMMENT                        =  4;
    const TP_XMLTAG                         =  5;
    const TP_PHP                            =  6;
    const TP_TEXT                           =  7;
    const TP_STRIPON                        =  8;
    const TP_STRIPOFF                       =  9;
    const TP_LITERALSTART                   = 10;
    const TP_LITERALEND                     = 11;
    const TP_LITERAL                        = 12;
    const TP_LDEL                           = 13;
    const TP_DOLLAR                         = 14;
    const TP_ID                             = 15;
    const TP_EQUAL                          = 16;
    const TP_PTR                            = 17;
    const TP_LDELIF                         = 18;
    const TP_LDELFOR                        = 19;
    const TP_SEMICOLON                      = 20;
    const TP_INCDEC                         = 21;
    const TP_TO                             = 22;
    const TP_STEP                           = 23;
    const TP_LDELFOREACH                    = 24;
    const TP_SPACE                          = 25;
    const TP_AS                             = 26;
    const TP_APTR                           = 27;
    const TP_LDELSETFILTER                  = 28;
    const TP_SMARTYBLOCKCHILDPARENT         = 29;
    const TP_LDELSLASH                      = 30;
    const TP_ATTR                           = 31;
    const TP_INTEGER                        = 32;
    const TP_COMMA                          = 33;
    const TP_OPENP                          = 34;
    const TP_CLOSEP                         = 35;
    const TP_MATH                           = 36;
    const TP_UNIMATH                        = 37;
    const TP_ANDSYM                         = 38;
    const TP_ISIN                           = 39;
    const TP_ISDIVBY                        = 40;
    const TP_ISNOTDIVBY                     = 41;
    const TP_ISEVEN                         = 42;
    const TP_ISNOTEVEN                      = 43;
    const TP_ISEVENBY                       = 44;
    const TP_ISNOTEVENBY                    = 45;
    const TP_ISODD                          = 46;
    const TP_ISNOTODD                       = 47;
    const TP_ISODDBY                        = 48;
    const TP_ISNOTODDBY                     = 49;
    const TP_INSTANCEOF                     = 50;
    const TP_QMARK                          = 51;
    const TP_NOT                            = 52;
    const TP_TYPECAST                       = 53;
    const TP_HEX                            = 54;
    const TP_DOT                            = 55;
    const TP_SINGLEQUOTESTRING              = 56;
    const TP_DOUBLECOLON                    = 57;
    const TP_NAMESPACE                      = 58;
    const TP_AT                             = 59;
    const TP_HATCH                          = 60;
    const TP_OPENB                          = 61;
    const TP_CLOSEB                         = 62;
    const TP_EQUALS                         = 63;
    const TP_NOTEQUALS                      = 64;
    const TP_GREATERTHAN                    = 65;
    const TP_LESSTHAN                       = 66;
    const TP_GREATEREQUAL                   = 67;
    const TP_LESSEQUAL                      = 68;
    const TP_IDENTITY                       = 69;
    const TP_NONEIDENTITY                   = 70;
    const TP_MOD                            = 71;
    const TP_LAND                           = 72;
    const TP_LOR                            = 73;
    const TP_LXOR                           = 74;
    const TP_QUOTE                          = 75;
    const TP_BACKTICK                       = 76;
    const TP_DOLLARID                       = 77;
    const YY_NO_ACTION = 562;
    const YY_ACCEPT_ACTION = 561;
    const YY_ERROR_ACTION = 560;

    const YY_SZ_ACTTAB = 2329;
static public $yy_action = array(
    220,   37,  328,  359,  195,  308,  304,  301,  303,  309,
    310,  198,  122,  339,   10,   45,  150,   17,   32,    2,
    108,   41,  120,  180,   39,  133,  201,  325,  234,  237,
     43,  238,  205,  346,  229,   51,   47,   46,   44,   16,
     15,  348,  345,   13,   42,  344,  341,   40,   35,  561,
     91,  266,  232,  305,  230,  220,  326,  423,  105,  220,
     11,  380,  342,  343,  279,  349,  350,  356,  357,  358,
    355,  354,  351,  352,  220,  198,  317,  314,  150,  423,
    242,    4,  335,   39,   20,  423,  300,   18,    8,   43,
    327,  340,  278,    2,  108,  346,   34,  220,   39,  133,
    194,   29,  347,  237,   43,  238,  475,  196,  475,   51,
     47,   46,   44,   16,   15,  348,  345,   13,   42,  344,
    341,   40,   35,   31,  220,  106,  159,  261,  205,  475,
     20,  475,  300,   23,  270,  312,  342,  343,  279,  349,
    350,  356,  357,  358,  355,  354,  351,  352,   39,  158,
    323,   26,  337,  205,   43,  220,   20,  417,  239,   51,
     47,   46,   44,   16,   15,  348,  345,   13,   42,  344,
    341,   40,   35,  220,  103,  164,  244,  315,  193,   39,
    318,   25,  139,  298,  312,   43,  342,  343,  279,  349,
    350,  356,  357,  358,  355,  354,  351,  352,   39,  220,
    295,  423,  205,  220,   43,  420,  205,  259,   51,   47,
     46,   44,   16,   15,  348,  345,   13,   42,  344,  341,
     40,   35,  220,  423,  100,  161,   20,  420,  300,  423,
     12,  158,  107,  420,  312,  342,  343,  279,  349,  350,
    356,  357,  358,  355,  354,  351,  352,  306,  232,  305,
    230,  184,  205,   20,   20,  300,  300,   51,   47,   46,
     44,   16,   15,  348,  345,   13,   42,  344,  341,   40,
     35,  136,  245,   20,  220,  300,   23,  290,  269,  190,
    325,  189,  325,  264,  342,  343,  279,  349,  350,  356,
    357,  358,  355,  354,  351,  352,  220,  465,   39,  244,
    250,  247,  235,  219,   43,  156,   22,  158,  158,  144,
     37,  233,  265,  202,  465,  200,  465,  465,  277,  465,
    465,  216,  222,  281,  291,  465,  346,  465,  475,  465,
    173,   51,   47,   46,   44,   16,   15,  348,  345,   13,
     42,  344,  341,   40,   35,  220,  214,  136,  176,  109,
    334,  475,    9,  122,  240,    7,  465,  312,  342,  343,
    279,  349,  350,  356,  357,  358,  355,  354,  351,  352,
    465,  214,  197,    5,   37,  206,  274,    9,  129,  272,
     51,   47,   46,   44,   16,   15,  348,  345,   13,   42,
    344,  341,   40,   35,  220,  182,  203,  160,  175,  105,
    205,  299,  331,  475,  312,  287,  312,  342,  343,  279,
    349,  350,  356,  357,  358,  355,  354,  351,  352,  487,
    299,   19,  206,  293,  206,  487,  475,   43,  476,   51,
     47,   46,   44,   16,   15,  348,  345,   13,   42,  344,
    341,   40,   35,  220,  169,  204,  177,  247,  276,  228,
     20,  476,  246,  312,  128,  312,  342,  343,  279,  349,
    350,  356,  357,  358,  355,  354,  351,  352,  313,   36,
    297,  206,  167,  132,  313,  143,  253,  249,   51,   47,
     46,   44,   16,   15,  348,  345,   13,   42,  344,  341,
     40,   35,  220,   28,  183,  137,  313,  220,   20,  385,
    252,  280,  101,   30,  199,  342,  343,  279,  349,  350,
    356,  357,  358,  355,  354,  351,  352,  135,  297,  319,
    192,  247,  231,  220,   45,  256,  148,   51,   47,   46,
     44,   16,   15,  348,  345,   13,   42,  344,  341,   40,
     35,  220,  255,  271,   20,    4,  225,  191,  205,   12,
    114,   97,  119,   98,  342,  343,  279,  349,  350,  356,
    357,  358,  355,  354,  351,  352,  297,  297,  297,  297,
    263,   38,  243,  125,  255,  113,   51,   47,   46,   44,
     16,   15,  348,  345,   13,   42,  344,  341,   40,   35,
    220,  297,  268,  187,  284,  283,  296,  289,  338,   95,
    102,  157,  312,  342,  343,  279,  349,  350,  356,  357,
    358,  355,  354,  351,  352,  292,  297,  297,   27,  307,
    262,  302,  148,  124,  158,   51,   47,   46,   44,   16,
     15,  348,  345,   13,   42,  344,  341,   40,   35,  220,
    166,  170,  147,  207,  134,  267,  123,  185,  141,  312,
    312,  220,  342,  343,  279,  349,  350,  356,  357,  358,
    355,  354,  351,  352,  136,    6,  286,  236,  311,  220,
    186,  313,  172,  117,   51,   47,   46,   44,   16,   15,
    348,  345,   13,   42,  344,  341,   40,   35,  220,  297,
    273,   14,  316,  206,  324,  118,  290,  181,  324,  233,
    130,  342,  343,  279,  349,  350,  356,  357,  358,  355,
    354,  351,  352,  258,  330,  313,  324,  104,  324,  324,
    324,  324,  324,   51,   47,   46,   44,   16,   15,  348,
    345,   13,   42,  344,  341,   40,   35,  220,  329,  324,
    324,  324,  324,  324,  324,  324,  324,  324,  324,  324,
    342,  343,  279,  349,  350,  356,  357,  358,  355,  354,
    351,  352,  324,  324,  324,  324,  324,  324,  324,  324,
    324,  324,   51,   47,   46,   44,   16,   15,  348,  345,
     13,   42,  344,  341,   40,   35,  324,  324,  324,  324,
    324,  324,  324,  324,  324,  324,  324,  324,  324,  342,
    343,  279,  349,  350,  356,  357,  358,  355,  354,  351,
    352,   51,   47,   46,   44,   16,   15,  348,  345,   13,
     42,  344,  341,   40,   35,  324,  324,  324,  324,  324,
    324,  324,  324,  324,  324,  324,  324,  324,  342,  343,
    279,  349,  350,  356,  357,  358,  355,  354,  351,  352,
    256,  324,   10,  142,  212,  324,  324,    2,  108,  324,
    324,  324,  288,  133,   21,  324,  335,  237,   20,  238,
    300,  257,    8,   33,  324,  477,   49,    2,  108,  324,
     39,  324,  241,  133,  324,  324,   43,  237,  324,  238,
    324,   50,   48,  285,  248,  294,  324,  227,  477,  105,
      1,  275,  324,  324,  324,   10,  138,   92,  179,  324,
      2,  108,  324,   20,   96,  300,  133,  312,  324,  324,
    237,  324,  238,  324,  257,   39,   33,  251,  324,   49,
    313,   43,  324,  163,  322,   26,  337,  324,  220,   20,
    390,  300,  312,  324,   50,   48,  285,  248,  294,  324,
    227,   39,  105,    1,  260,  313,  174,   43,   10,  142,
    218,  324,   39,    2,  108,  312,  324,   96,   43,  133,
    324,  475,  324,  237,  324,  238,  324,  257,  313,   33,
    324,  324,   49,  324,  324,  324,  324,  324,  324,  324,
    324,  324,  324,  324,  475,  288,  324,   50,   48,  285,
    248,  294,  324,  227,  324,  105,    1,  324,  477,  324,
    324,   10,  142,  215,  324,  324,    2,  108,  250,  324,
     96,  324,  133,  155,   94,  324,  237,  144,  238,  324,
    257,  477,   33,  324,  324,   49,  320,  324,  324,  216,
    222,  281,  291,  324,  346,  324,  324,  324,  324,  324,
     50,   48,  285,  248,  294,  324,  227,  324,  105,    1,
    324,  288,  324,  324,   10,  142,  208,  324,  324,    2,
    108,  324,  324,   96,  477,  133,  324,  324,  324,  237,
    324,  238,  324,  257,  324,   33,  324,  324,   49,  324,
     94,  324,  324,  324,  324,  324,  324,  477,  324,  324,
    324,  324,  324,   50,   48,  285,  248,  294,  324,  227,
    324,  105,    1,  324,  324,  324,  336,   10,  131,  218,
    324,  324,    2,  108,  250,  324,   96,  324,  133,  146,
    324,  324,  237,  144,  238,  324,  257,  324,    3,  324,
    324,   49,  324,  324,  324,  216,  222,  281,  291,  321,
    346,  324,  324,  324,  324,  324,   50,   48,  285,  248,
    294,  324,  227,  324,  105,    1,  324,  288,  324,  324,
     10,  122,  218,  324,  324,    2,  108,  324,  324,   96,
    477,  133,  324,  324,  324,  237,  324,  238,  324,  257,
    324,   24,  324,  324,   49,  324,   94,  324,  324,  324,
    324,  324,  324,  477,  324,  324,  324,  324,  324,   50,
     48,  285,  248,  294,  324,  227,  324,  105,    1,  324,
    324,  324,  324,   10,  127,  218,  324,  324,    2,  108,
    250,  324,   96,  324,  133,  145,  324,  324,  237,  144,
    238,  324,  257,  324,   33,  324,  324,   49,  324,  324,
    324,  216,  222,  281,  291,  324,  346,  324,  324,  324,
    324,  324,   50,   48,  285,  248,  294,  324,  227,  324,
    105,    1,  324,  324,  324,  324,   10,  142,  209,  324,
    324,    2,  108,  324,  324,   96,  324,  133,  324,  324,
    324,  237,  324,  238,  324,  226,  324,   33,  324,  324,
     49,  324,  324,  324,  324,  324,  324,  324,  324,  324,
    324,  324,  324,  324,  324,   50,   48,  285,  248,  294,
    324,  227,  324,  105,    1,  324,  324,  324,  324,   10,
    122,  218,  324,  324,    2,  108,  250,  324,   96,  324,
    133,  149,  324,  324,  237,  144,  238,  324,  257,  324,
     24,  324,  324,   49,  324,  324,  324,  216,  222,  281,
    291,  324,  346,  324,  324,  324,  324,  324,   50,   48,
    285,  248,  294,  324,  227,  324,  105,  324,  250,  324,
     99,  178,  324,  121,  324,  324,   80,  144,  324,  324,
    312,   96,  324,   17,   32,  282,  353,  324,  324,  213,
    222,  281,  291,  324,  346,  324,  324,  324,  205,  324,
    324,  324,  250,  324,  224,  333,  324,  153,  250,  324,
     84,  144,  324,  154,  324,  324,  324,  144,  324,  282,
    353,  324,  324,  213,  222,  281,  291,  324,  346,  216,
    222,  281,  291,  324,  346,  217,  324,  324,  324,  324,
    324,  250,  324,  324,  324,  324,  153,  324,  324,   84,
    144,  324,  324,  421,  324,  324,  324,  324,  282,  353,
    324,  324,  213,  222,  281,  291,  254,  346,  250,  324,
    324,  324,  324,  153,  223,  421,   84,  144,  324,  324,
    324,  421,  324,  324,  475,  282,  353,  324,  250,  213,
    222,  281,  291,  121,  346,  324,   80,  144,  324,  324,
    324,  221,  324,  324,  324,  282,  353,  475,  250,  213,
    222,  281,  291,  151,  346,  324,  324,  144,  250,  324,
    324,  324,  324,  153,  324,  332,   58,  115,  126,  216,
    222,  281,  291,  324,  346,  282,  353,  324,  324,  213,
    222,  281,  291,  324,  346,  250,  324,  324,  324,  324,
    153,  324,  324,   64,  115,  231,  250,  324,  324,  324,
    324,  153,  282,  353,   89,  144,  213,  222,  281,  291,
    324,  346,  324,  282,  353,  324,  250,  213,  222,  281,
    291,  153,  346,  324,   55,  144,  324,  324,  324,  324,
    324,  324,  324,  282,  353,  324,  324,  213,  222,  281,
    291,  250,  346,  324,  324,  324,  140,  324,  250,   56,
    144,  324,  324,  152,  324,  324,  324,  144,  282,  353,
    324,  324,  213,  222,  281,  291,  324,  346,  250,  216,
    222,  281,  291,  153,  346,  324,   61,  144,  324,  250,
    324,  324,  324,  324,  110,  282,  353,   65,  144,  213,
    222,  281,  291,  324,  346,  324,  282,  353,  324,  250,
    213,  222,  281,  291,  153,  346,  324,   74,  144,  324,
    324,  324,  324,  324,  324,  324,  282,  353,  324,  324,
    213,  222,  281,  291,  250,  346,  195,  171,  324,  153,
    324,  324,   63,  144,  324,  324,  312,  324,  324,   17,
     32,  282,  353,  324,  324,  213,  222,  281,  291,  324,
    346,  250,  324,  324,  205,  324,  153,  324,  324,   90,
    144,  324,  250,  324,  324,  324,  324,  153,  282,  353,
     52,  144,  213,  222,  281,  291,  324,  346,  324,  282,
    353,  324,  250,  213,  222,  281,  291,  153,  346,  324,
     62,  144,  324,  324,  324,  324,  324,  324,  324,  282,
    353,  324,  324,  211,  222,  281,  291,  250,  346,  195,
    168,  324,  153,  324,  324,   60,  144,  324,  324,  312,
    324,  324,   17,   32,  282,  353,  324,  324,  213,  222,
    281,  291,  324,  346,  250,  324,  324,  205,  324,  153,
    324,  324,   70,  144,  324,  250,  324,  324,  324,  324,
    153,  282,  353,   83,  144,  213,  222,  281,  291,  324,
    346,  324,  282,  353,  324,  250,  213,  222,  281,  291,
    153,  346,  324,   67,  144,  324,  324,  324,  324,  324,
    324,  324,  282,  353,  324,  324,  213,  222,  281,  291,
    250,  346,  195,  188,  324,   93,  324,  324,   54,  116,
    324,  324,  312,  324,  324,   17,   32,  282,  353,  324,
    324,  213,  222,  281,  291,  324,  346,  250,  324,  324,
    205,  324,  153,  324,  324,   66,  144,  324,  250,  324,
    324,  324,  324,   93,  282,  353,   53,  116,  213,  222,
    281,  291,  324,  346,  324,  282,  353,  324,  250,  210,
    222,  281,  291,  153,  346,  324,   75,  144,  324,  324,
    324,  324,  324,  324,  324,  282,  353,  324,  324,  213,
    222,  281,  291,  250,  346,  195,  162,  324,  153,  324,
    324,   81,  144,  324,  324,  312,  324,  324,   17,   32,
    282,  353,  324,  324,  213,  222,  281,  291,  324,  346,
    250,  324,  324,  205,  324,  153,  324,  324,   73,  144,
    324,  250,  324,  324,  324,  324,  153,  282,  353,   76,
    144,  213,  222,  281,  291,  324,  346,  324,  282,  353,
    324,  250,  213,  222,  281,  291,  153,  346,  324,   68,
    144,  324,  324,  324,  324,  324,  324,  324,  282,  353,
    324,  324,  213,  222,  281,  291,  250,  346,  195,  165,
    324,  153,  324,  324,   82,  144,  324,  324,  312,  324,
    324,   17,   32,  282,  353,  324,  324,  213,  222,  281,
    291,  324,  346,  250,  324,  324,  205,  324,  153,  324,
    324,   86,  144,  324,  250,  324,  324,  324,  324,  112,
    282,  353,   78,  144,  213,  222,  281,  291,  324,  346,
    324,  282,  353,  324,  250,  213,  222,  281,  291,  153,
    346,  324,   69,  144,  324,  324,  324,  324,  324,  324,
    324,  282,  353,  324,  324,  213,  222,  281,  291,  250,
    346,  324,  324,  324,  153,  324,  324,   71,  144,  324,
    324,  324,  324,  324,  324,  324,  282,  353,  324,  324,
    213,  222,  281,  291,  324,  346,  250,  324,  324,  324,
    324,  153,  324,  324,   77,  144,  324,  250,  324,  324,
    324,  324,  111,  282,  353,   87,  144,  213,  222,  281,
    291,  324,  346,  324,  282,  353,  324,  250,  213,  222,
    281,  291,  153,  346,  324,   88,  144,  324,  324,  324,
    324,  324,  324,  324,  282,  353,  324,  324,  213,  222,
    281,  291,  250,  346,  324,  324,  324,  153,  324,  324,
     59,  144,  324,  324,  324,  324,  324,  324,  324,  282,
    353,  324,  324,  213,  222,  281,  291,  324,  346,  250,
    324,  324,  324,  324,  153,  324,  324,   85,  144,  324,
    250,  324,  324,  324,  324,  153,  282,  353,   79,  144,
    213,  222,  281,  291,  324,  346,  324,  282,  353,  324,
    250,  213,  222,  281,  291,  153,  346,  324,   64,  144,
    324,  324,  324,  324,  324,  324,  324,  282,  353,  324,
    324,  213,  222,  281,  291,  250,  346,  324,  324,  324,
    153,  324,  324,   57,  144,  324,  324,  324,  324,  324,
    324,  324,  282,  353,  324,  324,  213,  222,  281,  291,
    324,  346,  250,  324,  324,  324,  324,  153,  324,  324,
     72,  144,  324,  324,  324,  324,  324,  324,  324,  282,
    353,  324,  324,  213,  222,  281,  291,  324,  346,
    );
    static public $yy_lookahead = array(
      1,   33,    3,   35,   88,    4,    5,    6,    7,    8,
      9,   10,   14,   15,   13,    2,   91,  101,  102,   18,
     19,   13,   14,   15,   25,   24,  112,  113,  103,   28,
     31,   30,  116,  108,   94,   36,   37,   38,   39,   40,
     41,   42,   43,   44,   45,   46,   47,   48,   49,   79,
     80,   81,   82,   83,   84,    1,   58,    3,   60,    1,
     13,    3,   63,   64,   65,   66,   67,   68,   69,   70,
     71,   72,   73,   74,    1,   10,   11,   12,   91,   25,
     26,   34,    7,   25,   13,   31,   15,   16,   13,   31,
    103,  104,   21,   18,   19,  108,   23,    1,   25,   24,
     88,   27,  113,   28,   31,   30,   34,   97,   34,   36,
     37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
     47,   48,   49,   27,    1,   88,   89,   55,  116,   57,
     13,   57,   15,   16,   62,   98,   63,   64,   65,   66,
     67,   68,   69,   70,   71,   72,   73,   74,   25,   17,
     75,   76,   77,  116,   31,    1,   13,    3,   15,   36,
     37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
     47,   48,   49,    1,   88,   89,   59,   83,   88,   25,
     86,   13,   14,   15,   98,   31,   63,   64,   65,   66,
     67,   68,   69,   70,   71,   72,   73,   74,   25,    1,
     32,    3,  116,    1,   31,    3,  116,   35,   36,   37,
     38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
     48,   49,    1,   25,   88,   89,   13,   25,   15,   31,
     16,   17,   97,   31,   98,   63,   64,   65,   66,   67,
     68,   69,   70,   71,   72,   73,   74,   81,   82,   83,
     84,  109,  116,   13,   13,   15,   15,   36,   37,   38,
     39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
     49,   57,   59,   13,    1,   15,   16,  110,   25,  112,
    113,  112,  113,   62,   63,   64,   65,   66,   67,   68,
     69,   70,   71,   72,   73,   74,    1,    3,   25,   59,
     82,   91,   92,   93,   31,   87,   16,   17,   17,   91,
     33,   82,   35,   97,   20,   20,   22,   23,  100,   25,
     26,  103,  104,  105,  106,   31,  108,   33,   34,   35,
     60,   36,   37,   38,   39,   40,   41,   42,   43,   44,
     45,   46,   47,   48,   49,    1,   55,   57,   89,  120,
    121,   57,   61,   14,   15,   34,   62,   98,   63,   64,
     65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
     76,   55,   88,   33,   33,  116,   35,   61,   57,   35,
     36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
     46,   47,   48,   49,    1,   89,    3,   89,  109,   60,
    116,  117,   62,   34,   98,   15,   98,   63,   64,   65,
     66,   67,   68,   69,   70,   71,   72,   73,   74,   55,
    117,   25,  116,    3,  116,   61,   57,   31,   34,   36,
     37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
     47,   48,   49,    1,   89,    3,   89,   91,   92,   59,
     13,   57,   15,   98,   95,   98,   63,   64,   65,   66,
     67,   68,   69,   70,   71,   72,   73,   74,  111,    2,
    111,  116,  109,   14,  111,   14,   14,   15,   36,   37,
     38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
     48,   49,    1,    2,  109,   34,  111,    1,   13,    3,
     15,   32,   95,   16,   20,   63,   64,   65,   66,   67,
     68,   69,   70,   71,   72,   73,   74,   33,  111,  107,
     88,   91,   92,    1,    2,    2,  114,   36,   37,   38,
     39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
     49,    1,   55,    3,   13,   34,   15,   15,  116,   16,
     95,   95,   95,   95,   63,   64,   65,   66,   67,   68,
     69,   70,   71,   72,   73,   74,  111,  111,  111,  111,
     15,   51,   15,   14,   55,   95,   36,   37,   38,   39,
     40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
      1,  111,    3,   89,   32,   15,   15,   15,    3,   15,
     95,   95,   98,   63,   64,   65,   66,   67,   68,   69,
     70,   71,   72,   73,   74,  107,  111,  111,   22,    3,
     35,    7,  114,   14,   17,   36,   37,   38,   39,   40,
     41,   42,   43,   44,   45,   46,   47,   48,   49,    1,
     89,   89,   15,   15,   14,   62,   14,   60,   15,   98,
     98,    1,   63,   64,   65,   66,   67,   68,   69,   70,
     71,   72,   73,   74,   57,   34,   15,   17,   98,    1,
    109,  111,  109,   95,   36,   37,   38,   39,   40,   41,
     42,   43,   44,   45,   46,   47,   48,   49,    1,  111,
    114,   94,   11,  116,  122,   85,  110,  109,  122,   82,
     96,   63,   64,   65,   66,   67,   68,   69,   70,   71,
     72,   73,   74,   26,   76,  111,  122,  109,  122,  122,
    122,  122,  122,   36,   37,   38,   39,   40,   41,   42,
     43,   44,   45,   46,   47,   48,   49,    1,  121,  122,
    122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
     63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
     73,   74,  122,  122,  122,  122,  122,  122,  122,  122,
    122,  122,   36,   37,   38,   39,   40,   41,   42,   43,
     44,   45,   46,   47,   48,   49,  122,  122,  122,  122,
    122,  122,  122,  122,  122,  122,  122,  122,  122,   63,
     64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
     74,   36,   37,   38,   39,   40,   41,   42,   43,   44,
     45,   46,   47,   48,   49,  122,  122,  122,  122,  122,
    122,  122,  122,  122,  122,  122,  122,  122,   63,   64,
     65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
      2,  122,   13,   14,   15,  122,  122,   18,   19,  122,
    122,  122,   21,   24,   16,  122,    7,   28,   13,   30,
     15,   32,   13,   34,  122,   34,   37,   18,   19,  122,
     25,  122,   27,   24,  122,  122,   31,   28,  122,   30,
    122,   52,   53,   54,   55,   56,  122,   58,   57,   60,
     61,   62,  122,  122,  122,   13,   14,   15,   89,  122,
     18,   19,  122,   13,   75,   15,   24,   98,  122,  122,
     28,   29,   30,  122,   32,   25,   34,   27,  122,   37,
    111,   31,  122,   89,   75,   76,   77,  122,    1,   13,
      3,   15,   98,  122,   52,   53,   54,   55,   56,  122,
     58,   25,   60,   61,   17,  111,   89,   31,   13,   14,
     15,  122,   25,   18,   19,   98,  122,   75,   31,   24,
    122,   34,  122,   28,  122,   30,  122,   32,  111,   34,
    122,  122,   37,  122,  122,  122,  122,  122,  122,  122,
    122,  122,  122,  122,   57,   21,  122,   52,   53,   54,
     55,   56,  122,   58,  122,   60,   61,  122,   34,  122,
    122,   13,   14,   15,  122,  122,   18,   19,   82,  122,
     75,  122,   24,   87,   50,  122,   28,   91,   30,  122,
     32,   57,   34,  122,  122,   37,  100,  122,  122,  103,
    104,  105,  106,  122,  108,  122,  122,  122,  122,  122,
     52,   53,   54,   55,   56,  122,   58,  122,   60,   61,
    122,   21,  122,  122,   13,   14,   15,  122,  122,   18,
     19,  122,  122,   75,   34,   24,  122,  122,  122,   28,
    122,   30,  122,   32,  122,   34,  122,  122,   37,  122,
     50,  122,  122,  122,  122,  122,  122,   57,  122,  122,
    122,  122,  122,   52,   53,   54,   55,   56,  122,   58,
    122,   60,   61,  122,  122,  122,   76,   13,   14,   15,
    122,  122,   18,   19,   82,  122,   75,  122,   24,   87,
    122,  122,   28,   91,   30,  122,   32,  122,   34,  122,
    122,   37,  122,  122,  122,  103,  104,  105,  106,    3,
    108,  122,  122,  122,  122,  122,   52,   53,   54,   55,
     56,  122,   58,  122,   60,   61,  122,   21,  122,  122,
     13,   14,   15,  122,  122,   18,   19,  122,  122,   75,
     34,   24,  122,  122,  122,   28,  122,   30,  122,   32,
    122,   34,  122,  122,   37,  122,   50,  122,  122,  122,
    122,  122,  122,   57,  122,  122,  122,  122,  122,   52,
     53,   54,   55,   56,  122,   58,  122,   60,   61,  122,
    122,  122,  122,   13,   14,   15,  122,  122,   18,   19,
     82,  122,   75,  122,   24,   87,  122,  122,   28,   91,
     30,  122,   32,  122,   34,  122,  122,   37,  122,  122,
    122,  103,  104,  105,  106,  122,  108,  122,  122,  122,
    122,  122,   52,   53,   54,   55,   56,  122,   58,  122,
     60,   61,  122,  122,  122,  122,   13,   14,   15,  122,
    122,   18,   19,  122,  122,   75,  122,   24,  122,  122,
    122,   28,  122,   30,  122,   32,  122,   34,  122,  122,
     37,  122,  122,  122,  122,  122,  122,  122,  122,  122,
    122,  122,  122,  122,  122,   52,   53,   54,   55,   56,
    122,   58,  122,   60,   61,  122,  122,  122,  122,   13,
     14,   15,  122,  122,   18,   19,   82,  122,   75,  122,
     24,   87,  122,  122,   28,   91,   30,  122,   32,  122,
     34,  122,  122,   37,  122,  122,  122,  103,  104,  105,
    106,  122,  108,  122,  122,  122,  122,  122,   52,   53,
     54,   55,   56,  122,   58,  122,   60,  122,   82,  122,
     88,   89,  122,   87,  122,  122,   90,   91,  122,  122,
     98,   75,  122,  101,  102,   99,  100,  122,  122,  103,
    104,  105,  106,  122,  108,  122,  122,  122,  116,  122,
    122,  122,   82,  122,  118,  119,  122,   87,   82,  122,
     90,   91,  122,   87,  122,  122,  122,   91,  122,   99,
    100,  122,  122,  103,  104,  105,  106,  122,  108,  103,
    104,  105,  106,  122,  108,  115,  122,  122,  122,  122,
    122,   82,  122,  122,  122,  122,   87,  122,  122,   90,
     91,  122,  122,    3,  122,  122,  122,  122,   99,  100,
    122,  122,  103,  104,  105,  106,   16,  108,   82,  122,
    122,  122,  122,   87,  115,   25,   90,   91,  122,  122,
    122,   31,  122,  122,   34,   99,  100,  122,   82,  103,
    104,  105,  106,   87,  108,  122,   90,   91,  122,  122,
    122,  115,  122,  122,  122,   99,  100,   57,   82,  103,
    104,  105,  106,   87,  108,  122,  122,   91,   82,  122,
    122,  122,  122,   87,  122,  119,   90,   91,   92,  103,
    104,  105,  106,  122,  108,   99,  100,  122,  122,  103,
    104,  105,  106,  122,  108,   82,  122,  122,  122,  122,
     87,  122,  122,   90,   91,   92,   82,  122,  122,  122,
    122,   87,   99,  100,   90,   91,  103,  104,  105,  106,
    122,  108,  122,   99,  100,  122,   82,  103,  104,  105,
    106,   87,  108,  122,   90,   91,  122,  122,  122,  122,
    122,  122,  122,   99,  100,  122,  122,  103,  104,  105,
    106,   82,  108,  122,  122,  122,   87,  122,   82,   90,
     91,  122,  122,   87,  122,  122,  122,   91,   99,  100,
    122,  122,  103,  104,  105,  106,  122,  108,   82,  103,
    104,  105,  106,   87,  108,  122,   90,   91,  122,   82,
    122,  122,  122,  122,   87,   99,  100,   90,   91,  103,
    104,  105,  106,  122,  108,  122,   99,  100,  122,   82,
    103,  104,  105,  106,   87,  108,  122,   90,   91,  122,
    122,  122,  122,  122,  122,  122,   99,  100,  122,  122,
    103,  104,  105,  106,   82,  108,   88,   89,  122,   87,
    122,  122,   90,   91,  122,  122,   98,  122,  122,  101,
    102,   99,  100,  122,  122,  103,  104,  105,  106,  122,
    108,   82,  122,  122,  116,  122,   87,  122,  122,   90,
     91,  122,   82,  122,  122,  122,  122,   87,   99,  100,
     90,   91,  103,  104,  105,  106,  122,  108,  122,   99,
    100,  122,   82,  103,  104,  105,  106,   87,  108,  122,
     90,   91,  122,  122,  122,  122,  122,  122,  122,   99,
    100,  122,  122,  103,  104,  105,  106,   82,  108,   88,
     89,  122,   87,  122,  122,   90,   91,  122,  122,   98,
    122,  122,  101,  102,   99,  100,  122,  122,  103,  104,
    105,  106,  122,  108,   82,  122,  122,  116,  122,   87,
    122,  122,   90,   91,  122,   82,  122,  122,  122,  122,
     87,   99,  100,   90,   91,  103,  104,  105,  106,  122,
    108,  122,   99,  100,  122,   82,  103,  104,  105,  106,
     87,  108,  122,   90,   91,  122,  122,  122,  122,  122,
    122,  122,   99,  100,  122,  122,  103,  104,  105,  106,
     82,  108,   88,   89,  122,   87,  122,  122,   90,   91,
    122,  122,   98,  122,  122,  101,  102,   99,  100,  122,
    122,  103,  104,  105,  106,  122,  108,   82,  122,  122,
    116,  122,   87,  122,  122,   90,   91,  122,   82,  122,
    122,  122,  122,   87,   99,  100,   90,   91,  103,  104,
    105,  106,  122,  108,  122,   99,  100,  122,   82,  103,
    104,  105,  106,   87,  108,  122,   90,   91,  122,  122,
    122,  122,  122,  122,  122,   99,  100,  122,  122,  103,
    104,  105,  106,   82,  108,   88,   89,  122,   87,  122,
    122,   90,   91,  122,  122,   98,  122,  122,  101,  102,
     99,  100,  122,  122,  103,  104,  105,  106,  122,  108,
     82,  122,  122,  116,  122,   87,  122,  122,   90,   91,
    122,   82,  122,  122,  122,  122,   87,   99,  100,   90,
     91,  103,  104,  105,  106,  122,  108,  122,   99,  100,
    122,   82,  103,  104,  105,  106,   87,  108,  122,   90,
     91,  122,  122,  122,  122,  122,  122,  122,   99,  100,
    122,  122,  103,  104,  105,  106,   82,  108,   88,   89,
    122,   87,  122,  122,   90,   91,  122,  122,   98,  122,
    122,  101,  102,   99,  100,  122,  122,  103,  104,  105,
    106,  122,  108,   82,  122,  122,  116,  122,   87,  122,
    122,   90,   91,  122,   82,  122,  122,  122,  122,   87,
     99,  100,   90,   91,  103,  104,  105,  106,  122,  108,
    122,   99,  100,  122,   82,  103,  104,  105,  106,   87,
    108,  122,   90,   91,  122,  122,  122,  122,  122,  122,
    122,   99,  100,  122,  122,  103,  104,  105,  106,   82,
    108,  122,  122,  122,   87,  122,  122,   90,   91,  122,
    122,  122,  122,  122,  122,  122,   99,  100,  122,  122,
    103,  104,  105,  106,  122,  108,   82,  122,  122,  122,
    122,   87,  122,  122,   90,   91,  122,   82,  122,  122,
    122,  122,   87,   99,  100,   90,   91,  103,  104,  105,
    106,  122,  108,  122,   99,  100,  122,   82,  103,  104,
    105,  106,   87,  108,  122,   90,   91,  122,  122,  122,
    122,  122,  122,  122,   99,  100,  122,  122,  103,  104,
    105,  106,   82,  108,  122,  122,  122,   87,  122,  122,
     90,   91,  122,  122,  122,  122,  122,  122,  122,   99,
    100,  122,  122,  103,  104,  105,  106,  122,  108,   82,
    122,  122,  122,  122,   87,  122,  122,   90,   91,  122,
     82,  122,  122,  122,  122,   87,   99,  100,   90,   91,
    103,  104,  105,  106,  122,  108,  122,   99,  100,  122,
     82,  103,  104,  105,  106,   87,  108,  122,   90,   91,
    122,  122,  122,  122,  122,  122,  122,   99,  100,  122,
    122,  103,  104,  105,  106,   82,  108,  122,  122,  122,
     87,  122,  122,   90,   91,  122,  122,  122,  122,  122,
    122,  122,   99,  100,  122,  122,  103,  104,  105,  106,
    122,  108,   82,  122,  122,  122,  122,   87,  122,  122,
     90,   91,  122,  122,  122,  122,  122,  122,  122,   99,
    100,  122,  122,  103,  104,  105,  106,  122,  108,
);
    const YY_SHIFT_USE_DFLT = -33;
    const YY_SHIFT_MAX = 261;
    static public $yy_shift_ofst = array(
      1,  998, 1104, 1104,  945,  998,  945,  945,  892,  839,
    892,  945,  945,  945,  945,  945,  945,  945,  945, 1263,
    945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
    945,  945,  945,  945,  945,  945, 1051,  945, 1210, 1263,
    945,  945,  945,  945, 1157, 1157, 1316, 1316, 1316, 1316,
   1316, 1316,   73,   -1,  123,  123,  123,  123,  123,  442,
    540,  589,  638,  344,  172,  687,  221,  393,  295,  491,
    736,  736,  736,  736,  736,  736,  736,  736,  736,  736,
    736,  736,  736,  736,  736,  736,  736,  736,  736,  775,
    775,    1,  937,   58,   -2,  273,  859,  855,  900,  154,
    154,  926,  926,  273,  291,  339,  273,  522,  461,   75,
     54,  202,  198,   71,  117,  214,  290,  260,   65,  240,
    143,   96,  241,  241,  241,  241,  173,  485,  241,  462,
    173,  437,  241,  396,  241,  461,  462,  461,  531,  241,
    496,  650,  437,  241,  607,  668,  668,  668,  132,  668,
    132,  668,  668,  668,  668,  668,  -33,  213,    8,  173,
    173,  173,  173,  173,  173,  173,  173,  316,  173,  173,
    173,  173,  316,  364,  173,  316,  173,  173,  173,  173,
     47,  316,  173,  316,  316,  364,  316,  173,  173,  132,
    132,  631,  668,  668,  668,  668,   13,  668,  681,  253,
    253,  132,   13,  -33,  -33,  -33,  -33,  -33,  294, 1460,
   1146, 1040,   72,  974,  168,   74,  841,  341,  369,  484,
    390,  277,  321,  -32,  340,  848,  487,  394,  651,  609,
    614,  585,  616,  595,  270,  596,  627,  628,  633,  631,
    587,  632,  630,  583,  582,  581,  523,  533,  469,  511,
    420,  459,  467,  532,  555,  562,  580,  519,  559,  520,
    584,  557,
);
    const YY_REDUCE_USE_DFLT = -87;
    const YY_REDUCE_MAX = 207;
    static public $yy_reduce_ofst = array(
    -30, 1296, 1446, 1473, 1330, 1416, 1369, 1396, 1816, 1805,
   1778, 1753, 1836, 1861, 1919, 1899, 1888, 1733, 1722, 1567,
   1556, 1529, 1504, 1587, 1612, 1695, 1670, 1650, 1639, 1944,
   1971, 2137, 2220, 2168, 2193, 2148, 1484, 2085, 2002, 1982,
   2027, 2110, 2054, 2065,  936,  218, 1336, 1254, 1042, 1436,
   1536, 1148, 1774, 1292, 1292, 1608, 1940, 1691, 1857,  -84,
    -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,
    -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,
    -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,
    -84,  166,   86,  136,  -13,   37,  229,  867,  844,  259,
    355,  819,  357,  308,  167,  -75,  306,  284,  210,  617,
     12,   12,   12,  604,  363,  -86,  -86,  363,   94,  363,
    359,   12,  457,  505,  480,  458,  551,  457,  385,  412,
    552,  455,  407,  504,  456,  356,  508,  430,  457,  506,
     12,  432,  457,  578,  -86,   12,   12,   90,  169,   12,
    -86,   12,   12,   12,   12,   12,   12,  560,  576,  570,
    570,  570,  570,  570,  570,  570,  570,  586,  570,  570,
    570,  570,  586,  588,  570,  586,  570,  570,  570,  570,
    561,  586,  570,  586,  586,  563,  586,  570,  570,  -11,
    -11,  608,  577,  577,  577,  577,  303,  577,  610,  597,
    -60,  -11,  303,  289,  142,  216,   10,  135,
);
    static public $yyExpectedTokens = array(
         array(4, 5, 6, 7, 8, 9, 10, 13, 18, 19, 24, 28, 30, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 29, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 62, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 29, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 61, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 75, ),
         array(13, 14, 15, 18, 19, 24, 28, 30, 32, 34, 37, 52, 53, 54, 55, 56, 58, 60, 75, ),
         array(1, 23, 25, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 3, 25, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 25, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 25, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 25, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 25, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 25, 31, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 3, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 3, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 3, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, ),
         array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 26, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 3, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 20, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 2, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(1, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, ),
         array(4, 5, 6, 7, 8, 9, 10, 13, 18, 19, 24, 28, 30, ),
         array(1, 3, 17, 25, 31, 34, 57, ),
         array(1, 3, 25, 31, ),
         array(14, 15, 58, 60, ),
         array(1, 25, 31, ),
         array(7, 13, 18, 19, 24, 28, 30, 75, 76, 77, ),
         array(13, 15, 25, 27, 31, ),
         array(13, 15, 25, 27, 31, ),
         array(1, 3, 25, 31, ),
         array(1, 3, 25, 31, ),
         array(13, 15, 25, 31, ),
         array(13, 15, 25, 31, ),
         array(1, 25, 31, ),
         array(17, 55, 61, ),
         array(14, 15, 60, ),
         array(1, 25, 31, ),
         array(1, 2, ),
         array(14, 34, ),
         array(7, 13, 18, 19, 24, 28, 30, 75, 76, 77, ),
         array(1, 3, 25, 26, 31, ),
         array(1, 3, 25, 31, ),
         array(1, 3, 25, 31, ),
         array(13, 15, 16, 21, ),
         array(13, 15, 16, 59, ),
         array(16, 17, 57, ),
         array(16, 17, 57, ),
         array(13, 15, 16, ),
         array(10, 11, 12, ),
         array(13, 15, 59, ),
         array(13, 15, ),
         array(1, 27, ),
         array(13, 15, ),
         array(13, 15, ),
         array(13, 15, ),
         array(13, 15, ),
         array(25, 31, ),
         array(13, 15, ),
         array(13, 15, ),
         array(14, 15, ),
         array(25, 31, ),
         array(13, 15, ),
         array(13, 15, ),
         array(25, 31, ),
         array(13, 15, ),
         array(14, 34, ),
         array(14, 15, ),
         array(14, 34, ),
         array(13, 15, ),
         array(13, 15, ),
         array(1, 3, ),
         array(1, 17, ),
         array(13, 15, ),
         array(13, 15, ),
         array(17, 57, ),
         array(1, ),
         array(1, ),
         array(1, ),
         array(17, ),
         array(1, ),
         array(17, ),
         array(1, ),
         array(1, ),
         array(1, ),
         array(1, ),
         array(1, ),
         array(),
         array(13, 15, 59, ),
         array(13, 14, 15, ),
         array(25, 31, ),
         array(25, 31, ),
         array(25, 31, ),
         array(25, 31, ),
         array(25, 31, ),
         array(25, 31, ),
         array(25, 31, ),
         array(25, 31, ),
         array(55, 61, ),
         array(25, 31, ),
         array(25, 31, ),
         array(25, 31, ),
         array(25, 31, ),
         array(55, 61, ),
         array(55, 61, ),
         array(25, 31, ),
         array(55, 61, ),
         array(25, 31, ),
         array(25, 31, ),
         array(25, 31, ),
         array(25, 31, ),
         array(13, 34, ),
         array(55, 61, ),
         array(25, 31, ),
         array(55, 61, ),
         array(55, 61, ),
         array(55, 61, ),
         array(55, 61, ),
         array(25, 31, ),
         array(25, 31, ),
         array(17, ),
         array(17, ),
         array(34, ),
         array(1, ),
         array(1, ),
         array(1, ),
         array(1, ),
         array(2, ),
         array(1, ),
         array(11, ),
         array(25, ),
         array(25, ),
         array(17, ),
         array(2, ),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(3, 20, 22, 23, 25, 26, 31, 33, 34, 35, 57, 62, 76, ),
         array(3, 16, 25, 31, 34, 57, ),
         array(3, 21, 34, 50, 57, ),
         array(21, 34, 50, 57, 76, ),
         array(34, 55, 57, 62, ),
         array(21, 34, 50, 57, ),
         array(13, 14, 15, 32, ),
         array(27, 34, 57, ),
         array(21, 34, 57, ),
         array(33, 35, ),
         array(34, 57, ),
         array(20, 33, ),
         array(15, 59, ),
         array(33, 35, ),
         array(34, 57, ),
         array(33, 35, ),
         array(33, 62, ),
         array(2, 16, ),
         array(16, 55, ),
         array(34, 57, ),
         array(15, ),
         array(14, ),
         array(7, ),
         array(35, ),
         array(3, ),
         array(3, ),
         array(60, ),
         array(22, ),
         array(15, ),
         array(15, ),
         array(15, ),
         array(34, ),
         array(60, ),
         array(14, ),
         array(14, ),
         array(62, ),
         array(15, ),
         array(15, ),
         array(2, ),
         array(16, ),
         array(32, ),
         array(34, ),
         array(3, ),
         array(14, ),
         array(2, ),
         array(15, ),
         array(15, ),
         array(32, ),
         array(15, ),
         array(55, ),
         array(14, ),
         array(51, ),
         array(15, ),
         array(15, ),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
         array(),
);
    static public $yy_default = array(
    363,  543,  560,  560,  514,  560,  514,  514,  560,  560,
    560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
    560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
    560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
    560,  560,  560,  560,  560,  560,  560,  560,  560,  560,
    560,  560,  417,  560,  417,  417,  386,  417,  394,  560,
    560,  560,  560,  560,  560,  422,  560,  560,  560,  560,
    399,  450,  441,  442,  427,  428,  443,  447,  422,  451,
    546,  446,  545,  438,  513,  544,  424,  419,  512,  453,
    454,  360,  465,  430,  560,  417,  560,  417,  417,  437,
    472,  417,  417,  417,  526,  560,  417,  408,  560,  560,
    430,  430,  430,  560,  487,  478,  478,  487,  560,  487,
    560,  430,  560,  560,  560,  560,  396,  560,  487,  560,
    417,  560,  560,  417,  560,  560,  560,  560,  560,  560,
    430,  411,  560,  560,  478,  433,  458,  413,  523,  434,
    478,  456,  457,  430,  435,  440,  521,  488,  560,  392,
    391,  382,  395,  406,  389,  387,  397,  485,  402,  381,
    398,  388,  482,  483,  404,  507,  383,  405,  384,  407,
    487,  484,  393,  505,  506,  481,  504,  403,  401,  524,
    527,  487,  412,  414,  472,  437,  515,  409,  377,  559,
    559,  501,  516,  487,  487,  520,  520,  520,  432,  465,
    455,  455,  465,  455,  560,  465,  455,  560,  465,  560,
    560,  560,  560,  560,  560,  499,  461,  473,  560,  560,
    369,  560,  560,  560,  560,  425,  560,  560,  560,  499,
    560,  560,  560,  560,  560,  560,  499,  560,  560,  525,
    560,  560,  499,  560,  560,  463,  560,  461,  560,  467,
    560,  560,  429,  418,  495,  509,  361,  494,  500,  558,
    493,  492,  467,  508,  510,  496,  426,  522,  400,  530,
    464,  466,  431,  432,  462,  460,  517,  518,  459,  479,
    486,  469,  470,  471,  468,  491,  489,  497,  490,  519,
    499,  368,  371,  370,  367,  366,  362,  364,  365,  372,
    373,  415,  416,  498,  379,  378,  374,  375,  376,  474,
    439,  554,  547,  548,  410,  502,  476,  477,  555,  549,
    552,  540,  542,  541,  550,  557,  551,  553,  556,  475,
    452,  449,  528,  529,  448,  445,  480,  503,  444,  531,
    532,  538,  539,  436,  537,  536,  533,  534,  535,  511,
);
    const YYNOCODE = 123;
    const YYSTACKDEPTH = 500;
    const YYNSTATE = 360;
    const YYNRULE = 200;
    const YYERRORSYMBOL = 78;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 0;
    public static $yyFallback = array(
    );
    public function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        $this->yyTraceFILE = $TraceFILE;
        $this->yyTracePrompt = $zTracePrompt;
    }

    public function PrintTrace()
    {
        $this->yyTraceFILE = fopen('php://output', 'w');
        $this->yyTracePrompt = '<br>';
    }

    public $yyTraceFILE;
    public $yyTracePrompt;
    public $yyidx;                    /* Index of top element in stack */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    public $yystack = array();  /* The parser's stack */

    public $yyTokenName = array(
  '$',             'VERT',          'COLON',         'RDEL',        
  'COMMENT',       'XMLTAG',        'PHP',           'TEXT',        
  'STRIPON',       'STRIPOFF',      'LITERALSTART',  'LITERALEND',  
  'LITERAL',       'LDEL',          'DOLLAR',        'ID',          
  'EQUAL',         'PTR',           'LDELIF',        'LDELFOR',     
  'SEMICOLON',     'INCDEC',        'TO',            'STEP',        
  'LDELFOREACH',   'SPACE',         'AS',            'APTR',        
  'LDELSETFILTER',  'SMARTYBLOCKCHILDPARENT',  'LDELSLASH',     'ATTR',        
  'INTEGER',       'COMMA',         'OPENP',         'CLOSEP',      
  'MATH',          'UNIMATH',       'ANDSYM',        'ISIN',        
  'ISDIVBY',       'ISNOTDIVBY',    'ISEVEN',        'ISNOTEVEN',   
  'ISEVENBY',      'ISNOTEVENBY',   'ISODD',         'ISNOTODD',    
  'ISODDBY',       'ISNOTODDBY',    'INSTANCEOF',    'QMARK',       
  'NOT',           'TYPECAST',      'HEX',           'DOT',         
  'SINGLEQUOTESTRING',  'DOUBLECOLON',   'NAMESPACE',     'AT',          
  'HATCH',         'OPENB',         'CLOSEB',        'EQUALS',      
  'NOTEQUALS',     'GREATERTHAN',   'LESSTHAN',      'GREATEREQUAL',
  'LESSEQUAL',     'IDENTITY',      'NONEIDENTITY',  'MOD',         
  'LAND',          'LOR',           'LXOR',          'QUOTE',       
  'BACKTICK',      'DOLLARID',      'error',         'start',       
  'template',      'template_element',  'smartytag',     'literal',     
  'text_content',  'literal_elements',  'literal_element',  'value',       
  'modifierlist',  'attributes',    'expr',          'varindexed',  
  'statement',     'statements',    'optspace',      'varvar',      
  'foraction',     'modparameters',  'attribute',     'ternary',     
  'array',         'ifcond',        'lop',           'variable',    
  'ns1',           'function',      'doublequoted_with_quotes',  'static_class_access',
  'object',        'arrayindex',    'indexdef',      'varvarele',   
  'objectchain',   'objectelement',  'method',        'params',      
  'modifier',      'modparameter',  'arrayelements',  'arrayelement',
  'doublequoted',  'doublequotedcontent',
    );

    public static $yyRuleName = array(
  "start ::= template",
  "template ::= template_element",
  "template ::= template template_element",
  "template ::=",
  "template_element ::= smartytag RDEL",
  "template_element ::= COMMENT",
  "template_element ::= literal",
  "template_element ::= XMLTAG",
  "template_element ::= PHP",
  "template_element ::= text_content",
  "text_content ::= TEXT",
  "text_content ::= text_content TEXT",
  "template_element ::= STRIPON",
  "template_element ::= STRIPOFF",
  "literal ::= LITERALSTART LITERALEND",
  "literal ::= LITERALSTART literal_elements LITERALEND",
  "literal_elements ::= literal_elements literal_element",
  "literal_elements ::=",
  "literal_element ::= literal",
  "literal_element ::= LITERAL",
  "smartytag ::= LDEL value",
  "smartytag ::= LDEL value modifierlist attributes",
  "smartytag ::= LDEL value attributes",
  "smartytag ::= LDEL expr modifierlist attributes",
  "smartytag ::= LDEL expr attributes",
  "smartytag ::= LDEL DOLLAR ID EQUAL value",
  "smartytag ::= LDEL DOLLAR ID EQUAL expr",
  "smartytag ::= LDEL DOLLAR ID EQUAL expr attributes",
  "smartytag ::= LDEL varindexed EQUAL expr attributes",
  "smartytag ::= LDEL ID attributes",
  "smartytag ::= LDEL ID",
  "smartytag ::= LDEL ID modifierlist attributes",
  "smartytag ::= LDEL ID PTR ID attributes",
  "smartytag ::= LDEL ID PTR ID modifierlist attributes",
  "smartytag ::= LDELIF expr",
  "smartytag ::= LDELIF expr attributes",
  "smartytag ::= LDELIF statement",
  "smartytag ::= LDELIF statement attributes",
  "smartytag ::= LDELFOR statements SEMICOLON optspace expr SEMICOLON optspace DOLLAR varvar foraction attributes",
  "foraction ::= EQUAL expr",
  "foraction ::= INCDEC",
  "smartytag ::= LDELFOR statement TO expr attributes",
  "smartytag ::= LDELFOR statement TO expr STEP expr attributes",
  "smartytag ::= LDELFOREACH attributes",
  "smartytag ::= LDELFOREACH SPACE value AS DOLLAR varvar attributes",
  "smartytag ::= LDELFOREACH SPACE value AS DOLLAR varvar APTR DOLLAR varvar attributes",
  "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar attributes",
  "smartytag ::= LDELFOREACH SPACE expr AS DOLLAR varvar APTR DOLLAR varvar attributes",
  "smartytag ::= LDELSETFILTER ID modparameters",
  "smartytag ::= LDELSETFILTER ID modparameters modifierlist",
  "smartytag ::= LDEL SMARTYBLOCKCHILDPARENT",
  "smartytag ::= LDELSLASH ID",
  "smartytag ::= LDELSLASH ID modifierlist",
  "smartytag ::= LDELSLASH ID PTR ID",
  "smartytag ::= LDELSLASH ID PTR ID modifierlist",
  "attributes ::= attributes attribute",
  "attributes ::= attribute",
  "attributes ::=",
  "attribute ::= SPACE ID EQUAL ID",
  "attribute ::= ATTR expr",
  "attribute ::= ATTR value",
  "attribute ::= SPACE ID",
  "attribute ::= SPACE expr",
  "attribute ::= SPACE value",
  "attribute ::= SPACE INTEGER EQUAL expr",
  "statements ::= statement",
  "statements ::= statements COMMA statement",
  "statement ::= DOLLAR varvar EQUAL expr",
  "statement ::= varindexed EQUAL expr",
  "statement ::= OPENP statement CLOSEP",
  "expr ::= value",
  "expr ::= ternary",
  "expr ::= DOLLAR ID COLON ID",
  "expr ::= expr MATH value",
  "expr ::= expr UNIMATH value",
  "expr ::= expr ANDSYM value",
  "expr ::= array",
  "expr ::= expr modifierlist",
  "expr ::= expr ifcond expr",
  "expr ::= expr ISIN array",
  "expr ::= expr ISIN value",
  "expr ::= expr lop expr",
  "expr ::= expr ISDIVBY expr",
  "expr ::= expr ISNOTDIVBY expr",
  "expr ::= expr ISEVEN",
  "expr ::= expr ISNOTEVEN",
  "expr ::= expr ISEVENBY expr",
  "expr ::= expr ISNOTEVENBY expr",
  "expr ::= expr ISODD",
  "expr ::= expr ISNOTODD",
  "expr ::= expr ISODDBY expr",
  "expr ::= expr ISNOTODDBY expr",
  "expr ::= variable INSTANCEOF ns1",
  "ternary ::= OPENP expr CLOSEP QMARK DOLLAR ID COLON expr",
  "ternary ::= OPENP expr CLOSEP QMARK expr COLON expr",
  "value ::= variable",
  "value ::= UNIMATH value",
  "value ::= NOT value",
  "value ::= TYPECAST value",
  "value ::= variable INCDEC",
  "value ::= HEX",
  "value ::= INTEGER",
  "value ::= INTEGER DOT INTEGER",
  "value ::= INTEGER DOT",
  "value ::= DOT INTEGER",
  "value ::= ID",
  "value ::= function",
  "value ::= OPENP expr CLOSEP",
  "value ::= SINGLEQUOTESTRING",
  "value ::= doublequoted_with_quotes",
  "value ::= varindexed DOUBLECOLON static_class_access",
  "value ::= smartytag RDEL",
  "value ::= value modifierlist",
  "value ::= NAMESPACE",
  "value ::= ns1 DOUBLECOLON static_class_access",
  "ns1 ::= ID",
  "ns1 ::= NAMESPACE",
  "ns1 ::= variable",
  "variable ::= varindexed",
  "variable ::= DOLLAR varvar AT ID",
  "variable ::= object",
  "variable ::= HATCH ID HATCH",
  "variable ::= HATCH ID HATCH arrayindex",
  "variable ::= HATCH variable HATCH",
  "variable ::= HATCH variable HATCH arrayindex",
  "varindexed ::= DOLLAR varvar arrayindex",
  "arrayindex ::= arrayindex indexdef",
  "arrayindex ::=",
  "indexdef ::= DOT DOLLAR varvar",
  "indexdef ::= DOT DOLLAR varvar AT ID",
  "indexdef ::= DOT ID",
  "indexdef ::= DOT INTEGER",
  "indexdef ::= DOT LDEL expr RDEL",
  "indexdef ::= OPENB ID CLOSEB",
  "indexdef ::= OPENB ID DOT ID CLOSEB",
  "indexdef ::= OPENB expr CLOSEB",
  "indexdef ::= OPENB CLOSEB",
  "varvar ::= varvarele",
  "varvar ::= varvar varvarele",
  "varvarele ::= ID",
  "varvarele ::= LDEL expr RDEL",
  "object ::= varindexed objectchain",
  "objectchain ::= objectelement",
  "objectchain ::= objectchain objectelement",
  "objectelement ::= PTR ID arrayindex",
  "objectelement ::= PTR DOLLAR varvar arrayindex",
  "objectelement ::= PTR LDEL expr RDEL arrayindex",
  "objectelement ::= PTR ID LDEL expr RDEL arrayindex",
  "objectelement ::= PTR method",
  "function ::= ns1 OPENP params CLOSEP",
  "method ::= ID OPENP params CLOSEP",
  "method ::= DOLLAR ID OPENP params CLOSEP",
  "params ::= params COMMA expr",
  "params ::= expr",
  "params ::=",
  "modifierlist ::= modifierlist modifier modparameters",
  "modifierlist ::= modifier modparameters",
  "modifier ::= VERT AT ID",
  "modifier ::= VERT ID",
  "modparameters ::= modparameters modparameter",
  "modparameters ::=",
  "modparameter ::= COLON value",
  "modparameter ::= COLON array",
  "static_class_access ::= method",
  "static_class_access ::= method objectchain",
  "static_class_access ::= ID",
  "static_class_access ::= DOLLAR ID arrayindex",
  "static_class_access ::= DOLLAR ID arrayindex objectchain",
  "ifcond ::= EQUALS",
  "ifcond ::= NOTEQUALS",
  "ifcond ::= GREATERTHAN",
  "ifcond ::= LESSTHAN",
  "ifcond ::= GREATEREQUAL",
  "ifcond ::= LESSEQUAL",
  "ifcond ::= IDENTITY",
  "ifcond ::= NONEIDENTITY",
  "ifcond ::= MOD",
  "lop ::= LAND",
  "lop ::= LOR",
  "lop ::= LXOR",
  "array ::= OPENB arrayelements CLOSEB",
  "arrayelements ::= arrayelement",
  "arrayelements ::= arrayelements COMMA arrayelement",
  "arrayelements ::=",
  "arrayelement ::= value APTR expr",
  "arrayelement ::= ID APTR expr",
  "arrayelement ::= expr",
  "doublequoted_with_quotes ::= QUOTE QUOTE",
  "doublequoted_with_quotes ::= QUOTE doublequoted QUOTE",
  "doublequoted ::= doublequoted doublequotedcontent",
  "doublequoted ::= doublequotedcontent",
  "doublequotedcontent ::= BACKTICK variable BACKTICK",
  "doublequotedcontent ::= BACKTICK expr BACKTICK",
  "doublequotedcontent ::= DOLLARID",
  "doublequotedcontent ::= LDEL variable RDEL",
  "doublequotedcontent ::= LDEL expr RDEL",
  "doublequotedcontent ::= smartytag RDEL",
  "doublequotedcontent ::= TEXT",
  "optspace ::= SPACE",
  "optspace ::=",
    );

    public function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count($this->yyTokenName)) {
            return $this->yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    public static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    public function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if ($this->yyTraceFILE && $this->yyidx >= 0) {
            fwrite($this->yyTraceFILE,
                $this->yyTracePrompt . 'Popping ' . $this->yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;

        return $yymajor;
    }

    public function __destruct()
    {
        while ($this->yystack !== Array()) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource($this->yyTraceFILE)) {
            fclose($this->yyTraceFILE);
        }
    }

    public function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno][1];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno][0]);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                $expected = array_merge($expected, self::$yyExpectedTokens[$nextstate]);
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;

                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno][0];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
    $this->yyidx = $yyidx;
    $this->yystack = $stack;

        return array_unique($expected);
    }

    public function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno][1];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno][0]);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;

                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno][0];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;

        return true;
    }

   public function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;

        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if ($this->yyTraceFILE) {
                    fwrite($this->yyTraceFILE, $this->yyTracePrompt . "FALLBACK " .
                        $this->yyTokenName[$iLookAhead] . " => " .
                        $this->yyTokenName[$iFallback] . "\n");
                }

                return $this->yy_find_shift_action($iFallback);
            }

            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    public function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if ($this->yyTraceFILE) {
                fprintf($this->yyTraceFILE, "%sStack Overflow!\n", $this->yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
#line 173 "../smarty/lexer/smarty_internal_templateparser.y"

    $this->internalError = true;
    $this->compiler->trigger_template_error("Stack overflow in template parser");

            return;
        }
        $yytos = new TP_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if ($this->yyTraceFILE && $this->yyidx > 0) {
            fprintf($this->yyTraceFILE, "%sShift %d\n", $this->yyTracePrompt,
                $yyNewState);
            fprintf($this->yyTraceFILE, "%sStack:", $this->yyTracePrompt);
            for ($i = 1; $i <= $this->yyidx; $i++) {
                fprintf($this->yyTraceFILE, " %s",
                    $this->yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite($this->yyTraceFILE,"\n");
        }
    }

    public static $yyRuleInfo = array(
  array( 0 => 79, 1 => 1 ),
  array( 0 => 80, 1 => 1 ),
  array( 0 => 80, 1 => 2 ),
  array( 0 => 80, 1 => 0 ),
  array( 0 => 81, 1 => 2 ),
  array( 0 => 81, 1 => 1 ),
  array( 0 => 81, 1 => 1 ),
  array( 0 => 81, 1 => 1 ),
  array( 0 => 81, 1 => 1 ),
  array( 0 => 81, 1 => 1 ),
  array( 0 => 84, 1 => 1 ),
  array( 0 => 84, 1 => 2 ),
  array( 0 => 81, 1 => 1 ),
  array( 0 => 81, 1 => 1 ),
  array( 0 => 83, 1 => 2 ),
  array( 0 => 83, 1 => 3 ),
  array( 0 => 85, 1 => 2 ),
  array( 0 => 85, 1 => 0 ),
  array( 0 => 86, 1 => 1 ),
  array( 0 => 86, 1 => 1 ),
  array( 0 => 82, 1 => 2 ),
  array( 0 => 82, 1 => 4 ),
  array( 0 => 82, 1 => 3 ),
  array( 0 => 82, 1 => 4 ),
  array( 0 => 82, 1 => 3 ),
  array( 0 => 82, 1 => 5 ),
  array( 0 => 82, 1 => 5 ),
  array( 0 => 82, 1 => 6 ),
  array( 0 => 82, 1 => 5 ),
  array( 0 => 82, 1 => 3 ),
  array( 0 => 82, 1 => 2 ),
  array( 0 => 82, 1 => 4 ),
  array( 0 => 82, 1 => 5 ),
  array( 0 => 82, 1 => 6 ),
  array( 0 => 82, 1 => 2 ),
  array( 0 => 82, 1 => 3 ),
  array( 0 => 82, 1 => 2 ),
  array( 0 => 82, 1 => 3 ),
  array( 0 => 82, 1 => 11 ),
  array( 0 => 96, 1 => 2 ),
  array( 0 => 96, 1 => 1 ),
  array( 0 => 82, 1 => 5 ),
  array( 0 => 82, 1 => 7 ),
  array( 0 => 82, 1 => 2 ),
  array( 0 => 82, 1 => 7 ),
  array( 0 => 82, 1 => 10 ),
  array( 0 => 82, 1 => 7 ),
  array( 0 => 82, 1 => 10 ),
  array( 0 => 82, 1 => 3 ),
  array( 0 => 82, 1 => 4 ),
  array( 0 => 82, 1 => 2 ),
  array( 0 => 82, 1 => 2 ),
  array( 0 => 82, 1 => 3 ),
  array( 0 => 82, 1 => 4 ),
  array( 0 => 82, 1 => 5 ),
  array( 0 => 89, 1 => 2 ),
  array( 0 => 89, 1 => 1 ),
  array( 0 => 89, 1 => 0 ),
  array( 0 => 98, 1 => 4 ),
  array( 0 => 98, 1 => 2 ),
  array( 0 => 98, 1 => 2 ),
  array( 0 => 98, 1 => 2 ),
  array( 0 => 98, 1 => 2 ),
  array( 0 => 98, 1 => 2 ),
  array( 0 => 98, 1 => 4 ),
  array( 0 => 93, 1 => 1 ),
  array( 0 => 93, 1 => 3 ),
  array( 0 => 92, 1 => 4 ),
  array( 0 => 92, 1 => 3 ),
  array( 0 => 92, 1 => 3 ),
  array( 0 => 90, 1 => 1 ),
  array( 0 => 90, 1 => 1 ),
  array( 0 => 90, 1 => 4 ),
  array( 0 => 90, 1 => 3 ),
  array( 0 => 90, 1 => 3 ),
  array( 0 => 90, 1 => 3 ),
  array( 0 => 90, 1 => 1 ),
  array( 0 => 90, 1 => 2 ),
  array( 0 => 90, 1 => 3 ),
  array( 0 => 90, 1 => 3 ),
  array( 0 => 90, 1 => 3 ),
  array( 0 => 90, 1 => 3 ),
  array( 0 => 90, 1 => 3 ),
  array( 0 => 90, 1 => 3 ),
  array( 0 => 90, 1 => 2 ),
  array( 0 => 90, 1 => 2 ),
  array( 0 => 90, 1 => 3 ),
  array( 0 => 90, 1 => 3 ),
  array( 0 => 90, 1 => 2 ),
  array( 0 => 90, 1 => 2 ),
  array( 0 => 90, 1 => 3 ),
  array( 0 => 90, 1 => 3 ),
  array( 0 => 90, 1 => 3 ),
  array( 0 => 99, 1 => 8 ),
  array( 0 => 99, 1 => 7 ),
  array( 0 => 87, 1 => 1 ),
  array( 0 => 87, 1 => 2 ),
  array( 0 => 87, 1 => 2 ),
  array( 0 => 87, 1 => 2 ),
  array( 0 => 87, 1 => 2 ),
  array( 0 => 87, 1 => 1 ),
  array( 0 => 87, 1 => 1 ),
  array( 0 => 87, 1 => 3 ),
  array( 0 => 87, 1 => 2 ),
  array( 0 => 87, 1 => 2 ),
  array( 0 => 87, 1 => 1 ),
  array( 0 => 87, 1 => 1 ),
  array( 0 => 87, 1 => 3 ),
  array( 0 => 87, 1 => 1 ),
  array( 0 => 87, 1 => 1 ),
  array( 0 => 87, 1 => 3 ),
  array( 0 => 87, 1 => 2 ),
  array( 0 => 87, 1 => 2 ),
  array( 0 => 87, 1 => 1 ),
  array( 0 => 87, 1 => 3 ),
  array( 0 => 104, 1 => 1 ),
  array( 0 => 104, 1 => 1 ),
  array( 0 => 104, 1 => 1 ),
  array( 0 => 103, 1 => 1 ),
  array( 0 => 103, 1 => 4 ),
  array( 0 => 103, 1 => 1 ),
  array( 0 => 103, 1 => 3 ),
  array( 0 => 103, 1 => 4 ),
  array( 0 => 103, 1 => 3 ),
  array( 0 => 103, 1 => 4 ),
  array( 0 => 91, 1 => 3 ),
  array( 0 => 109, 1 => 2 ),
  array( 0 => 109, 1 => 0 ),
  array( 0 => 110, 1 => 3 ),
  array( 0 => 110, 1 => 5 ),
  array( 0 => 110, 1 => 2 ),
  array( 0 => 110, 1 => 2 ),
  array( 0 => 110, 1 => 4 ),
  array( 0 => 110, 1 => 3 ),
  array( 0 => 110, 1 => 5 ),
  array( 0 => 110, 1 => 3 ),
  array( 0 => 110, 1 => 2 ),
  array( 0 => 95, 1 => 1 ),
  array( 0 => 95, 1 => 2 ),
  array( 0 => 111, 1 => 1 ),
  array( 0 => 111, 1 => 3 ),
  array( 0 => 108, 1 => 2 ),
  array( 0 => 112, 1 => 1 ),
  array( 0 => 112, 1 => 2 ),
  array( 0 => 113, 1 => 3 ),
  array( 0 => 113, 1 => 4 ),
  array( 0 => 113, 1 => 5 ),
  array( 0 => 113, 1 => 6 ),
  array( 0 => 113, 1 => 2 ),
  array( 0 => 105, 1 => 4 ),
  array( 0 => 114, 1 => 4 ),
  array( 0 => 114, 1 => 5 ),
  array( 0 => 115, 1 => 3 ),
  array( 0 => 115, 1 => 1 ),
  array( 0 => 115, 1 => 0 ),
  array( 0 => 88, 1 => 3 ),
  array( 0 => 88, 1 => 2 ),
  array( 0 => 116, 1 => 3 ),
  array( 0 => 116, 1 => 2 ),
  array( 0 => 97, 1 => 2 ),
  array( 0 => 97, 1 => 0 ),
  array( 0 => 117, 1 => 2 ),
  array( 0 => 117, 1 => 2 ),
  array( 0 => 107, 1 => 1 ),
  array( 0 => 107, 1 => 2 ),
  array( 0 => 107, 1 => 1 ),
  array( 0 => 107, 1 => 3 ),
  array( 0 => 107, 1 => 4 ),
  array( 0 => 101, 1 => 1 ),
  array( 0 => 101, 1 => 1 ),
  array( 0 => 101, 1 => 1 ),
  array( 0 => 101, 1 => 1 ),
  array( 0 => 101, 1 => 1 ),
  array( 0 => 101, 1 => 1 ),
  array( 0 => 101, 1 => 1 ),
  array( 0 => 101, 1 => 1 ),
  array( 0 => 101, 1 => 1 ),
  array( 0 => 102, 1 => 1 ),
  array( 0 => 102, 1 => 1 ),
  array( 0 => 102, 1 => 1 ),
  array( 0 => 100, 1 => 3 ),
  array( 0 => 118, 1 => 1 ),
  array( 0 => 118, 1 => 3 ),
  array( 0 => 118, 1 => 0 ),
  array( 0 => 119, 1 => 3 ),
  array( 0 => 119, 1 => 3 ),
  array( 0 => 119, 1 => 1 ),
  array( 0 => 106, 1 => 2 ),
  array( 0 => 106, 1 => 3 ),
  array( 0 => 120, 1 => 2 ),
  array( 0 => 120, 1 => 1 ),
  array( 0 => 121, 1 => 3 ),
  array( 0 => 121, 1 => 3 ),
  array( 0 => 121, 1 => 1 ),
  array( 0 => 121, 1 => 3 ),
  array( 0 => 121, 1 => 3 ),
  array( 0 => 121, 1 => 2 ),
  array( 0 => 121, 1 => 1 ),
  array( 0 => 94, 1 => 1 ),
  array( 0 => 94, 1 => 0 ),
    );

    public static $yyReduceMap = array(
        0 => 0,
        1 => 1,
        2 => 2,
        4 => 4,
        5 => 5,
        6 => 6,
        7 => 6,
        8 => 8,
        9 => 9,
        10 => 10,
        18 => 10,
        19 => 10,
        40 => 10,
        62 => 10,
        63 => 10,
        70 => 10,
        71 => 10,
        76 => 10,
        95 => 10,
        100 => 10,
        101 => 10,
        106 => 10,
        108 => 10,
        109 => 10,
        113 => 10,
        115 => 10,
        116 => 10,
        117 => 10,
        120 => 10,
        137 => 10,
        163 => 10,
        165 => 10,
        181 => 10,
        186 => 10,
        198 => 10,
        11 => 11,
        12 => 12,
        13 => 13,
        14 => 14,
        17 => 14,
        199 => 14,
        15 => 15,
        69 => 15,
        16 => 16,
        96 => 16,
        98 => 16,
        99 => 16,
        126 => 16,
        164 => 16,
        20 => 20,
        21 => 21,
        22 => 22,
        24 => 22,
        23 => 23,
        25 => 25,
        26 => 25,
        27 => 27,
        28 => 28,
        29 => 29,
        30 => 30,
        31 => 31,
        32 => 32,
        33 => 33,
        34 => 34,
        35 => 35,
        37 => 35,
        36 => 36,
        38 => 38,
        39 => 39,
        41 => 41,
        42 => 42,
        43 => 43,
        44 => 44,
        46 => 44,
        45 => 45,
        47 => 45,
        48 => 48,
        49 => 49,
        50 => 50,
        51 => 51,
        52 => 52,
        53 => 53,
        54 => 54,
        55 => 55,
        56 => 56,
        65 => 56,
        153 => 56,
        157 => 56,
        161 => 56,
        162 => 56,
        57 => 57,
        154 => 57,
        160 => 57,
        58 => 58,
        59 => 59,
        60 => 59,
        61 => 61,
        64 => 64,
        66 => 66,
        67 => 67,
        68 => 67,
        72 => 72,
        73 => 73,
        74 => 73,
        75 => 73,
        77 => 77,
        112 => 77,
        78 => 78,
        81 => 78,
        79 => 79,
        80 => 80,
        82 => 82,
        83 => 83,
        84 => 84,
        89 => 84,
        85 => 85,
        88 => 85,
        86 => 86,
        91 => 86,
        87 => 87,
        90 => 87,
        92 => 92,
        93 => 93,
        94 => 94,
        97 => 97,
        102 => 102,
        103 => 103,
        104 => 104,
        105 => 105,
        107 => 107,
        110 => 110,
        111 => 111,
        114 => 114,
        118 => 118,
        119 => 119,
        121 => 121,
        122 => 122,
        123 => 123,
        124 => 124,
        125 => 125,
        127 => 127,
        183 => 127,
        128 => 128,
        129 => 129,
        130 => 130,
        131 => 131,
        132 => 132,
        135 => 132,
        133 => 133,
        134 => 134,
        136 => 136,
        138 => 138,
        139 => 139,
        140 => 140,
        141 => 141,
        142 => 142,
        143 => 143,
        144 => 144,
        145 => 145,
        146 => 146,
        147 => 147,
        148 => 148,
        149 => 149,
        150 => 150,
        151 => 151,
        152 => 152,
        155 => 155,
        156 => 156,
        158 => 158,
        159 => 159,
        166 => 166,
        167 => 167,
        168 => 168,
        169 => 169,
        170 => 170,
        171 => 171,
        172 => 172,
        173 => 173,
        174 => 174,
        175 => 175,
        176 => 176,
        177 => 177,
        178 => 178,
        179 => 179,
        180 => 180,
        182 => 182,
        184 => 184,
        185 => 185,
        187 => 187,
        188 => 188,
        189 => 189,
        190 => 190,
        191 => 191,
        192 => 191,
        194 => 191,
        193 => 193,
        195 => 195,
        196 => 196,
        197 => 197,
    );
#line 184 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r0(){
    $this->compiler->processInheritance($this);
    $this->_retvalue = $this->root_buffer->to_smarty_php();
    }
#line 193 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r1(){
    if ($this->yystack[$this->yyidx + 0]->minor != null) {
        $this->current_buffer->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 200 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r2(){
    if ($this->yystack[$this->yyidx + 0]->minor != null) {
        // because of possible code injection
        $this->current_buffer->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    }
    }
#line 214 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r4(){
    if ($this->compiler->has_code) {
        $tmp =''; foreach ($this->compiler->prefix_code as $code) {$tmp.=$code;} $this->compiler->prefix_code=array();
        $this->_retvalue = new Smarty_Internal_ParseTree_Tag($this, $this->compiler->processNocacheCode($tmp.$this->yystack[$this->yyidx + -1]->minor,true));
    } else { 
        $this->_retvalue = null;
    }  
    $this->compiler->has_variable_string = false;
    $this->block_nesting_level = count($this->compiler->_tag_stack);
    }
#line 226 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r5(){
    $this->_retvalue = null;
    }
#line 231 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r6(){
    $this->_retvalue = new Smarty_Internal_ParseTree_Text($this, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 243 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r8(){
    $code = $this->compiler->compileTag('private_php',array(array('code' => $this->yystack[$this->yyidx + 0]->minor), array('type' => $this->lex->phpType )),array());
    if ($this->compiler->has_code && !empty($code)) {
        $tmp =''; foreach ($this->compiler->prefix_code as $code) {$tmp.=$code;} $this->compiler->prefix_code=array();
        $this->_retvalue = new Smarty_Internal_ParseTree_Tag($this, $this->compiler->processNocacheCode($tmp.$code,true));
    } else {
        $this->_retvalue = null;
    }
    }
#line 254 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r9(){
        $this->_retvalue = $this->compiler->processText($this->yystack[$this->yyidx + 0]->minor);
    }
#line 258 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r10(){
    $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 262 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r11(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 267 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r12(){
    $this->strip = true;
    }
#line 271 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r13(){
    $this->strip = false;
    }
#line 276 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r14(){
    $this->_retvalue = '';
    }
#line 280 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r15(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 284 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r16(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 305 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r20(){
    $this->_retvalue = $this->compiler->compileTag('private_print_expression',array(),array('value'=>$this->yystack[$this->yyidx + 0]->minor));
    }
#line 309 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r21(){
    $this->_retvalue = $this->compiler->compileTag('private_print_expression',$this->yystack[$this->yyidx + 0]->minor,array('value'=>$this->yystack[$this->yyidx + -2]->minor, 'modifierlist'=>$this->yystack[$this->yyidx + -1]->minor));
    }
#line 313 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r22(){
    $this->_retvalue = $this->compiler->compileTag('private_print_expression',$this->yystack[$this->yyidx + 0]->minor,array('value'=>$this->yystack[$this->yyidx + -1]->minor));
    }
#line 317 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r23(){
    $this->_retvalue = $this->compiler->compileTag('private_print_expression',$this->yystack[$this->yyidx + 0]->minor,array('value'=>$this->yystack[$this->yyidx + -2]->minor,'modifierlist'=>$this->yystack[$this->yyidx + -1]->minor));
    }
#line 330 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r25(){
    $this->_retvalue = $this->compiler->compileTag('assign',array(array('value'=>$this->yystack[$this->yyidx + 0]->minor),array('var'=>"'".$this->yystack[$this->yyidx + -2]->minor."'")));
    }
#line 338 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r27(){
    $this->_retvalue = $this->compiler->compileTag('assign',array_merge(array(array('value'=>$this->yystack[$this->yyidx + -1]->minor),array('var'=>"'".$this->yystack[$this->yyidx + -3]->minor."'")),$this->yystack[$this->yyidx + 0]->minor));
    }
#line 342 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r28(){
    $this->_retvalue = $this->compiler->compileTag('assign',array_merge(array(array('value'=>$this->yystack[$this->yyidx + -1]->minor),array('var'=>$this->yystack[$this->yyidx + -3]->minor['var'])),$this->yystack[$this->yyidx + 0]->minor),array('smarty_internal_index'=>$this->yystack[$this->yyidx + -3]->minor['smarty_internal_index']));
    }
#line 347 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r29(){
        if (defined($this->yystack[$this->yyidx + -1]->minor)) {
            $this->_retvalue = $this->compiler->compileTag('private_print_expression',$this->yystack[$this->yyidx + 0]->minor,array('value'=>$this->yystack[$this->yyidx + -1]->minor));
        } else {
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor);
        }
    }
#line 354 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r30(){
        if (defined($this->yystack[$this->yyidx + 0]->minor)) {
            $this->_retvalue = $this->compiler->compileTag('private_print_expression',array(),array('value'=>$this->yystack[$this->yyidx + 0]->minor));
        } else {
            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor,array());
        }
    }
#line 364 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r31(){
        if (defined($this->yystack[$this->yyidx + -2]->minor)) {
            $this->_retvalue = $this->compiler->compileTag('private_print_expression',$this->yystack[$this->yyidx + 0]->minor,array('value'=>$this->yystack[$this->yyidx + -2]->minor, 'modifierlist'=>$this->yystack[$this->yyidx + -1]->minor));
        } else {
            $this->_retvalue = "ob_start();\n".$this->compiler->compileTag($this->yystack[$this->yyidx + -2]->minor,$this->yystack[$this->yyidx + 0]->minor).'echo ';
            $this->_retvalue .= $this->compiler->compileTag('private_modifier',array(),array('modifierlist'=>$this->yystack[$this->yyidx + -1]->minor,'value'=>'ob_get_clean()')).";\n";
        }
    }
#line 374 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r32(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -3]->minor,$this->yystack[$this->yyidx + 0]->minor,array('object_method'=>$this->yystack[$this->yyidx + -1]->minor));
    }
#line 379 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r33(){
    $this->_retvalue = "ob_start();\n" .$this->compiler->compileTag($this->yystack[$this->yyidx + -4]->minor,$this->yystack[$this->yyidx + 0]->minor,array('object_method'=>$this->yystack[$this->yyidx + -2]->minor)).'echo ';
    $this->_retvalue .= $this->compiler->compileTag('private_modifier',array(),array('modifierlist'=>$this->yystack[$this->yyidx + -1]->minor,'value'=>'ob_get_clean()')).";\n";
    }
#line 385 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r34(){
    $tag = trim(substr($this->yystack[$this->yyidx + -1]->minor,$this->lex->ldel_length)); 
    $this->_retvalue = $this->compiler->compileTag(($tag == 'else if')? 'elseif' : $tag,array(),array('if condition'=>$this->yystack[$this->yyidx + 0]->minor));
    }
#line 390 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r35(){
    $tag = trim(substr($this->yystack[$this->yyidx + -2]->minor,$this->lex->ldel_length));
    $this->_retvalue = $this->compiler->compileTag(($tag == 'else if')? 'elseif' : $tag,$this->yystack[$this->yyidx + 0]->minor,array('if condition'=>$this->yystack[$this->yyidx + -1]->minor));
    }
#line 395 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r36(){
    $tag = trim(substr($this->yystack[$this->yyidx + -1]->minor,$this->lex->ldel_length));
    $this->_retvalue = $this->compiler->compileTag(($tag == 'else if')? 'elseif' : $tag,array(),array('if condition'=>$this->yystack[$this->yyidx + 0]->minor));
    }
#line 406 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r38(){
    $this->_retvalue = $this->compiler->compileTag('for',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('start'=>$this->yystack[$this->yyidx + -9]->minor),array('ifexp'=>$this->yystack[$this->yyidx + -6]->minor),array('var'=>$this->yystack[$this->yyidx + -2]->minor),array('step'=>$this->yystack[$this->yyidx + -1]->minor))),1);
    }
#line 410 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r39(){
    $this->_retvalue = '='.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 418 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r41(){
    $this->_retvalue = $this->compiler->compileTag('for',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('start'=>$this->yystack[$this->yyidx + -3]->minor),array('to'=>$this->yystack[$this->yyidx + -1]->minor))),0);
    }
#line 422 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r42(){
    $this->_retvalue = $this->compiler->compileTag('for',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('start'=>$this->yystack[$this->yyidx + -5]->minor),array('to'=>$this->yystack[$this->yyidx + -3]->minor),array('step'=>$this->yystack[$this->yyidx + -1]->minor))),0);
    }
#line 427 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r43(){
    $this->_retvalue = $this->compiler->compileTag('foreach',$this->yystack[$this->yyidx + 0]->minor);
    }
#line 432 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r44(){
    $this->_retvalue = $this->compiler->compileTag('foreach',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('from'=>$this->yystack[$this->yyidx + -4]->minor),array('item'=>$this->yystack[$this->yyidx + -1]->minor))));
    }
#line 436 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r45(){
    $this->_retvalue = $this->compiler->compileTag('foreach',array_merge($this->yystack[$this->yyidx + 0]->minor,array(array('from'=>$this->yystack[$this->yyidx + -7]->minor),array('item'=>$this->yystack[$this->yyidx + -1]->minor),array('key'=>$this->yystack[$this->yyidx + -4]->minor))));
    }
#line 449 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r48(){
    $this->_retvalue = $this->compiler->compileTag('setfilter',array(),array('modifier_list'=>array(array_merge(array($this->yystack[$this->yyidx + -1]->minor),$this->yystack[$this->yyidx + 0]->minor))));
    }
#line 453 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r49(){
    $this->_retvalue = $this->compiler->compileTag('setfilter',array(),array('modifier_list'=>array_merge(array(array_merge(array($this->yystack[$this->yyidx + -2]->minor),$this->yystack[$this->yyidx + -1]->minor)),$this->yystack[$this->yyidx + 0]->minor)));
    }
#line 458 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r50(){
    $j = strrpos($this->yystack[$this->yyidx + 0]->minor,'.');
    if ($this->yystack[$this->yyidx + 0]->minor[$j+1] == 'c') {
        // {$smarty.block.child}
        $this->_retvalue = Smarty_Internal_Compile_Block::compileChildBlock($this->compiler);
    } else {
        // {$smarty.block.parent}
        $this->_retvalue = Smarty_Internal_Compile_Block::compileParentBlock($this->compiler);
    }
    }
#line 471 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r51(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor.'close',array());
    }
#line 475 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r52(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor.'close',array(),array('modifier_list'=>$this->yystack[$this->yyidx + 0]->minor));
    }
#line 480 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r53(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -2]->minor.'close',array(),array('object_method'=>$this->yystack[$this->yyidx + 0]->minor));
    }
#line 484 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r54(){
    $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -3]->minor.'close',array(),array('object_method'=>$this->yystack[$this->yyidx + -1]->minor, 'modifier_list'=>$this->yystack[$this->yyidx + 0]->minor));
    }
#line 492 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r55(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    $this->_retvalue[] = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 498 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r56(){
    $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 503 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r57(){
    $this->_retvalue = array();
    }
#line 508 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r58(){
    if (defined($this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>$this->yystack[$this->yyidx + 0]->minor);
    } else {
        $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>"'".$this->yystack[$this->yyidx + 0]->minor."'");
    }
    }
#line 516 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r59(){
    $this->_retvalue = array(trim($this->yystack[$this->yyidx + -1]->minor," =\n\r\t")=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 524 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r61(){
    $this->_retvalue = "'".$this->yystack[$this->yyidx + 0]->minor."'";
    }
#line 536 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r64(){
    $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 549 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r66(){
    $this->yystack[$this->yyidx + -2]->minor[]=$this->yystack[$this->yyidx + 0]->minor;
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;
    }
#line 554 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r67(){
    $this->_retvalue = array('var' => $this->yystack[$this->yyidx + -2]->minor, 'value'=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 582 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r72(){
    $this->_retvalue = '$_smarty_tpl->getStreamVariable(\''. $this->yystack[$this->yyidx + -2]->minor .'://'. $this->yystack[$this->yyidx + 0]->minor . '\')';
    }
#line 587 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r73(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor . trim($this->yystack[$this->yyidx + -1]->minor) . $this->yystack[$this->yyidx + 0]->minor;
    }
#line 606 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r77(){
    $this->_retvalue = $this->compiler->compileTag('private_modifier',array(),array('value'=>$this->yystack[$this->yyidx + -1]->minor,'modifierlist'=>$this->yystack[$this->yyidx + 0]->minor));
    }
#line 612 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r78(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 616 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r79(){
    $this->_retvalue = 'in_array('.$this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor.')';
    }
#line 620 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r80(){
    $this->_retvalue = 'in_array('.$this->yystack[$this->yyidx + -2]->minor.',(array)'.$this->yystack[$this->yyidx + 0]->minor.')';
    }
#line 628 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r82(){
    $this->_retvalue = '!('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')';
    }
#line 632 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r83(){
    $this->_retvalue = '('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')';
    }
#line 636 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r84(){
    $this->_retvalue = '!(1 & '.$this->yystack[$this->yyidx + -1]->minor.')';
    }
#line 640 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r85(){
    $this->_retvalue = '(1 & '.$this->yystack[$this->yyidx + -1]->minor.')';
    }
#line 644 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r86(){
    $this->_retvalue = '!(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')';
    }
#line 648 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r87(){
    $this->_retvalue = '(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')';
    }
#line 668 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r92(){
      $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;
        }
#line 676 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r93(){
    $this->_retvalue = $this->yystack[$this->yyidx + -6]->minor.' ? '. $this->compiler->compileVariable("'".$this->yystack[$this->yyidx + -2]->minor."'") . ' : '.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 680 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r94(){
    $this->_retvalue = $this->yystack[$this->yyidx + -5]->minor.' ? '.$this->yystack[$this->yyidx + -2]->minor.' : '.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 695 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r97(){
    $this->_retvalue = '!'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 716 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r102(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 720 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r103(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.'.';
    }
#line 724 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r104(){
    $this->_retvalue = '.'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 729 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r105(){
    if (defined($this->yystack[$this->yyidx + 0]->minor)) {
        $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;
    } else {
        $this->_retvalue = "'".$this->yystack[$this->yyidx + 0]->minor."'";
    }
    }
#line 743 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r107(){
    $this->_retvalue = "(". $this->yystack[$this->yyidx + -1]->minor .")";
    }
#line 758 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r110(){
    self::$prefix_number++;
    if ($this->yystack[$this->yyidx + -2]->minor['var'] == '\'smarty\'') {
        $this->compiler->prefix_code[] = '$_tmp'.self::$prefix_number.' = '. $this->compiler->compileTag('private_special_variable',array(),$this->yystack[$this->yyidx + -2]->minor['smarty_internal_index']).";\n";
    } else {
        $this->compiler->prefix_code[] = '$_tmp'.self::$prefix_number.' = '. $this->compiler->compileVariable($this->yystack[$this->yyidx + -2]->minor['var']).$this->yystack[$this->yyidx + -2]->minor['smarty_internal_index'].";\n";
    }
    $this->_retvalue = '$_tmp'.self::$prefix_number.'::'.$this->yystack[$this->yyidx + 0]->minor;

    }
#line 770 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r111(){
    self::$prefix_number++;
    $this->compiler->prefix_code[] = "ob_start();\n".$this->yystack[$this->yyidx + -1]->minor.'$_tmp'.self::$prefix_number."=ob_get_clean();\n";
    $this->_retvalue = '$_tmp'.self::$prefix_number;
    }
#line 786 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r114(){
    if (!$this->security || isset($this->smarty->registered_classes[$this->yystack[$this->yyidx + -2]->minor]) || $this->smarty->security_policy->isTrustedStaticClass($this->yystack[$this->yyidx + -2]->minor, $this->compiler)) {
        if (isset($this->smarty->registered_classes[$this->yystack[$this->yyidx + -2]->minor])) {
            $this->_retvalue = $this->smarty->registered_classes[$this->yystack[$this->yyidx + -2]->minor].'::'.$this->yystack[$this->yyidx + 0]->minor;
        } else {
            $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'::'.$this->yystack[$this->yyidx + 0]->minor;
        } 
    } else {
        $this->compiler->trigger_template_error ("static class '".$this->yystack[$this->yyidx + -2]->minor."' is undefined or not allowed by security setting");
    }
    }
#line 820 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r118(){
    if ($this->yystack[$this->yyidx + 0]->minor['var'] == '\'smarty\'') {
        $smarty_var = $this->compiler->compileTag('private_special_variable',array(),$this->yystack[$this->yyidx + 0]->minor['smarty_internal_index']);
        $this->_retvalue = $smarty_var;
    } else {
        // used for array reset,next,prev,end,current 
        $this->last_variable = $this->yystack[$this->yyidx + 0]->minor['var'];
        $this->last_index = $this->yystack[$this->yyidx + 0]->minor['smarty_internal_index'];
        $this->_retvalue = $this->compiler->compileVariable($this->yystack[$this->yyidx + 0]->minor['var']).$this->yystack[$this->yyidx + 0]->minor['smarty_internal_index'];
    }
    }
#line 833 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r119(){
    $this->_retvalue = '$_smarty_tpl->tpl_vars['. $this->yystack[$this->yyidx + -2]->minor .']->'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 843 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r121(){
    $this->_retvalue = '$_smarty_tpl->getConfigVariable( \''. $this->yystack[$this->yyidx + -1]->minor .'\')';
    }
#line 847 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r122(){
    $this->_retvalue = '(is_array($tmp = $_smarty_tpl->getConfigVariable( \''. $this->yystack[$this->yyidx + -2]->minor .'\')) ? $tmp'.$this->yystack[$this->yyidx + 0]->minor.' :null)';
    }
#line 851 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r123(){
    $this->_retvalue = '$_smarty_tpl->getConfigVariable( '. $this->yystack[$this->yyidx + -1]->minor .')';
    }
#line 855 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r124(){
    $this->_retvalue = '(is_array($tmp = $_smarty_tpl->getConfigVariable( '. $this->yystack[$this->yyidx + -2]->minor .')) ? $tmp'.$this->yystack[$this->yyidx + 0]->minor.' : null)';
    }
#line 859 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r125(){
    $this->_retvalue = array('var'=>$this->yystack[$this->yyidx + -1]->minor, 'smarty_internal_index'=>$this->yystack[$this->yyidx + 0]->minor);
    }
#line 872 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r127(){
    return;
    }
#line 878 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r128(){
    $this->_retvalue = '['.$this->compiler->compileVariable($this->yystack[$this->yyidx + 0]->minor).']';
    }
#line 882 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r129(){
    $this->_retvalue = '['.$this->compiler->compileVariable($this->yystack[$this->yyidx + -2]->minor).'->'.$this->yystack[$this->yyidx + 0]->minor.']';
    }
#line 886 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r130(){
    if (defined($this->yystack[$this->yyidx + 0]->minor)) {
            $this->_retvalue = "[". $this->yystack[$this->yyidx + 0]->minor ."]";
        } else {
            $this->_retvalue = "['". $this->yystack[$this->yyidx + 0]->minor ."']";
        }
    }
#line 894 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r131(){
    $this->_retvalue = "[". $this->yystack[$this->yyidx + 0]->minor ."]";
    }
#line 899 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r132(){
    $this->_retvalue = "[". $this->yystack[$this->yyidx + -1]->minor ."]";
    }
#line 904 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r133(){
    $this->_retvalue = '['.$this->compiler->compileTag('private_special_variable',array(),'[\'section\'][\''.$this->yystack[$this->yyidx + -1]->minor.'\'][\'index\']').']';
    }
#line 908 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r134(){
    $this->_retvalue = '['.$this->compiler->compileTag('private_special_variable',array(),'[\'section\'][\''.$this->yystack[$this->yyidx + -3]->minor.'\'][\''.$this->yystack[$this->yyidx + -1]->minor.'\']').']';
    }
#line 918 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r136(){
    $this->_retvalue = '[]';
    }
#line 932 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r138(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 937 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r139(){
    $this->_retvalue = '\''.$this->yystack[$this->yyidx + 0]->minor.'\'';
    }
#line 942 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r140(){
    $this->_retvalue = '('.$this->yystack[$this->yyidx + -1]->minor.')';
    }
#line 949 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r141(){
    if ($this->yystack[$this->yyidx + -1]->minor['var'] == '\'smarty\'') {
        $this->_retvalue =  $this->compiler->compileTag('private_special_variable',array(),$this->yystack[$this->yyidx + -1]->minor['smarty_internal_index']).$this->yystack[$this->yyidx + 0]->minor;
    } else {
        $this->_retvalue = $this->compiler->compileVariable($this->yystack[$this->yyidx + -1]->minor['var']).$this->yystack[$this->yyidx + -1]->minor['smarty_internal_index'].$this->yystack[$this->yyidx + 0]->minor;
    }
    }
#line 958 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r142(){
    $this->_retvalue  = $this->yystack[$this->yyidx + 0]->minor;
    }
#line 963 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r143(){
    $this->_retvalue  = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 968 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r144(){
    if ($this->security && substr($this->yystack[$this->yyidx + -1]->minor,0,1) == '_') {
        $this->compiler->trigger_template_error (self::Err1);
    }
    $this->_retvalue = '->'.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 975 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r145(){
    if ($this->security) {
        $this->compiler->trigger_template_error (self::Err2);
    }
    $this->_retvalue = '->{'.$this->compiler->compileVariable($this->yystack[$this->yyidx + -1]->minor).$this->yystack[$this->yyidx + 0]->minor.'}';
    }
#line 982 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r146(){
    if ($this->security) {
        $this->compiler->trigger_template_error (self::Err2);
    }
    $this->_retvalue = '->{'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + 0]->minor.'}';
    }
#line 989 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r147(){
    if ($this->security) {
        $this->compiler->trigger_template_error (self::Err2);
    }
    $this->_retvalue = '->{\''.$this->yystack[$this->yyidx + -4]->minor.'\'.'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + 0]->minor.'}';
    }
#line 997 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r148(){
    $this->_retvalue = '->'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 1005 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r149(){
    if (!$this->security || $this->smarty->security_policy->isTrustedPhpFunction($this->yystack[$this->yyidx + -3]->minor, $this->compiler)) {
        if (strcasecmp($this->yystack[$this->yyidx + -3]->minor,'isset') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor,'empty') === 0 || strcasecmp($this->yystack[$this->yyidx + -3]->minor,'array') === 0 || is_callable($this->yystack[$this->yyidx + -3]->minor)) {
            $func_name = strtolower($this->yystack[$this->yyidx + -3]->minor);
            if ($func_name == 'isset') {
                if (count($this->yystack[$this->yyidx + -1]->minor) == 0) {
                    $this->compiler->trigger_template_error ('Illegal number of paramer in "isset()"');
                }
                $par = implode(',',$this->yystack[$this->yyidx + -1]->minor);
                if (strncasecmp($par,'$_smarty_tpl->getConfigVariable',strlen('$_smarty_tpl->getConfigVariable')) === 0) {
                    self::$prefix_number++;
                    $this->compiler->prefix_code[] = '$_tmp'.self::$prefix_number.'='.str_replace(')',', false)',$par).";\n";
                    $isset_par = '$_tmp'.self::$prefix_number;
                } else {
                    $isset_par=str_replace("')->value","',null,true,false)->value",$par);
                }
                $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $isset_par .")";
            } elseif (in_array($func_name,array('empty','reset','current','end','prev','next'))){
                if (count($this->yystack[$this->yyidx + -1]->minor) != 1) {
                    $this->compiler->trigger_template_error ('Illegal number of paramer in "empty()"');
                }
                if ($func_name == 'empty') {
                    $this->_retvalue = $func_name.'('.str_replace("')->value","',null,true,false)->value",$this->yystack[$this->yyidx + -1]->minor[0]).')';
                } else {
                    $this->_retvalue = $func_name.'('.$this->yystack[$this->yyidx + -1]->minor[0].')';
                }
            } else {
                $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". implode(',',$this->yystack[$this->yyidx + -1]->minor) .")";
            }
        } else {
            $this->compiler->trigger_template_error ("unknown function \"" . $this->yystack[$this->yyidx + -3]->minor . "\"");
        }
    }
    }
#line 1044 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r150(){
    if ($this->security && substr($this->yystack[$this->yyidx + -3]->minor,0,1) == '_') {
        $this->compiler->trigger_template_error (self::Err1);
    }
    $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". implode(',',$this->yystack[$this->yyidx + -1]->minor) .")";
    }
#line 1051 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r151(){
    if ($this->security) {
        $this->compiler->trigger_template_error (self::Err2);
    }
    self::$prefix_number++;
    $this->compiler->prefix_code[] = '$_tmp'.self::$prefix_number.'='.$this->compiler->compileVariable("'".$this->yystack[$this->yyidx + -3]->minor."'").";\n";
    $this->_retvalue = '$_tmp'.self::$prefix_number.'('. implode(',',$this->yystack[$this->yyidx + -1]->minor) .')';
    }
#line 1062 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r152(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array($this->yystack[$this->yyidx + 0]->minor));
    }
#line 1079 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r155(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -2]->minor,array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor)));
    }
#line 1083 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r156(){
    $this->_retvalue = array(array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor));
    }
#line 1091 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r158(){
    $this->_retvalue =  array($this->yystack[$this->yyidx + 0]->minor);
    }
#line 1099 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r159(){
    $this->_retvalue = array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor);
    }
#line 1133 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r166(){
    $this->_retvalue = '$'.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 1138 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r167(){
    $this->_retvalue = '$'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 1144 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r168(){
    $this->_retvalue = '==';
    }
#line 1148 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r169(){
    $this->_retvalue = '!=';
    }
#line 1152 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r170(){
    $this->_retvalue = '>';
    }
#line 1156 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r171(){
    $this->_retvalue = '<';
    }
#line 1160 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r172(){
    $this->_retvalue = '>=';
    }
#line 1164 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r173(){
    $this->_retvalue = '<=';
    }
#line 1168 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r174(){
    $this->_retvalue = '===';
    }
#line 1172 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r175(){
    $this->_retvalue = '!==';
    }
#line 1176 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r176(){
    $this->_retvalue = '%';
    }
#line 1180 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r177(){
    $this->_retvalue = '&&';
    }
#line 1184 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r178(){
    $this->_retvalue = '||';
    }
#line 1188 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r179(){
    $this->_retvalue = ' XOR ';
    }
#line 1195 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r180(){
    $this->_retvalue = 'array('.$this->yystack[$this->yyidx + -1]->minor.')';
    }
#line 1203 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r182(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 1211 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r184(){
    $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'=>'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 1215 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r185(){ 
    $this->_retvalue = '\''.$this->yystack[$this->yyidx + -2]->minor.'\'=>'.$this->yystack[$this->yyidx + 0]->minor;
    }
#line 1227 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r187(){
    $this->_retvalue = "''";
    }
#line 1231 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r188(){
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor->to_smarty_php();
    }
#line 1236 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r189(){
    $this->yystack[$this->yyidx + -1]->minor->append_subtree($this->yystack[$this->yyidx + 0]->minor);
    $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;
    }
#line 1241 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r190(){
    $this->_retvalue = new Smarty_Internal_ParseTree_Dq($this, $this->yystack[$this->yyidx + 0]->minor);
    }
#line 1245 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r191(){
    $this->_retvalue = new Smarty_Internal_ParseTree_Code($this, '(string)'.$this->yystack[$this->yyidx + -1]->minor);
    }
#line 1253 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r193(){
    $this->_retvalue = new Smarty_Internal_ParseTree_Code($this, '(string)$_smarty_tpl->tpl_vars[\''. substr($this->yystack[$this->yyidx + 0]->minor,1) .'\']->value');
    }
#line 1261 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r195(){
    $this->_retvalue = new Smarty_Internal_ParseTree_Code($this, '(string)('.$this->yystack[$this->yyidx + -1]->minor.')');
    }
#line 1265 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r196(){
    $this->_retvalue = new Smarty_Internal_ParseTree_Tag($this, $this->yystack[$this->yyidx + -1]->minor);
    }
#line 1269 "../smarty/lexer/smarty_internal_templateparser.y"
    function yy_r197(){
    $this->_retvalue = new Smarty_Internal_ParseTree_DqContent($this, $this->yystack[$this->yyidx + 0]->minor);
    }

    private $_retvalue;

    public function yy_reduce($yyruleno)
    {
        $yymsp = $this->yystack[$this->yyidx];
        if ($this->yyTraceFILE && $yyruleno >= 0
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf($this->yyTraceFILE, "%sReduce (%d) [%s].\n",
                $this->yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno][0];
        $yysize = self::$yyRuleInfo[$yyruleno][1];
        $this->yyidx -= $yysize;
        for ($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            if (!$this->yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new TP_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    public function yy_parse_failed()
    {
        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sFail!\n", $this->yyTracePrompt);
        } while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
    }

    public function yy_syntax_error($yymajor, $TOKEN)
    {
#line 166 "../smarty/lexer/smarty_internal_templateparser.y"

    $this->internalError = true;
    $this->yymajor = $yymajor;
    $this->compiler->trigger_template_error();
    }

    public function yy_accept()
    {
        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sAccept!\n", $this->yyTracePrompt);
        } while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
#line 159 "../smarty/lexer/smarty_internal_templateparser.y"

    $this->successful = !$this->internalError;
    $this->internalError = false;
    $this->retvalue = $this->_retvalue;
    }

    public function doParse($yymajor, $yytokenvalue)
    {
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */

        if ($this->yyidx === null || $this->yyidx < 0) {
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new TP_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);

        if ($this->yyTraceFILE) {
            fprintf($this->yyTraceFILE, "%sInput %s\n",
                $this->yyTracePrompt, $this->yyTokenName[$yymajor]);
        }

        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL &&
                  !$this->yy_is_expected_token($yymajor)) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if ($this->yyTraceFILE) {
                    fprintf($this->yyTraceFILE, "%sSyntax Error!\n",
                        $this->yyTracePrompt);
                }
                if (self::YYERRORSYMBOL) {
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit) {
                        if ($this->yyTraceFILE) {
                            fprintf($this->yyTraceFILE, "%sDiscard input token %s\n",
                                $this->yyTracePrompt, $this->yyTokenName[$yymajor]);
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0 &&
                                 $yymx != self::YYERRORSYMBOL &&
        ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                              ){
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}

